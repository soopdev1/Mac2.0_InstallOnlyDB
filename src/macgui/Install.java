/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package macgui;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.sql.DatabaseMetaData;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import static macgui.Utility.hostPROD;
import static macgui.Utility.hostTEST;

/**
 *
 * @author rcosco
 */
public class Install extends javax.swing.JFrame {

    /**
     * Creates new form Install
     */
    public Install() {
        initComponents();
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation(dim.width / 2 - this.getSize().width / 2, dim.height / 2 - this.getSize().height / 2);
        this.f1ok.setVisible(false);
        this.f2ok.setVisible(false);
        this.f3ok.setVisible(false);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        branchcod = new javax.swing.JTextField();
        type = new javax.swing.JComboBox<>();
        jSeparator1 = new javax.swing.JSeparator();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        f1ok = new javax.swing.JLabel();
        f1ko = new javax.swing.JLabel();
        f2ok = new javax.swing.JLabel();
        f2ko = new javax.swing.JLabel();
        f3ok = new javax.swing.JLabel();
        f3ko = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Frontend Maccorp");

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("Mac 2.0 - Install Database v2.0");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("BRANCH ID:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("DATABASE:");

        type.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "PRODUZIONE", "TEST" }));

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton1.setText("FASE UNO");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton2.setText("FASE DUE");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton3.setText("FASE TRE");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        f1ok.setIcon(new javax.swing.ImageIcon(getClass().getResource("/macgui/ok-icon.png"))); // NOI18N

        f1ko.setIcon(new javax.swing.ImageIcon(getClass().getResource("/macgui/Actions-window-close-icon.png"))); // NOI18N

        f2ok.setIcon(new javax.swing.ImageIcon(getClass().getResource("/macgui/ok-icon.png"))); // NOI18N

        f2ko.setIcon(new javax.swing.ImageIcon(getClass().getResource("/macgui/Actions-window-close-icon.png"))); // NOI18N

        f3ok.setIcon(new javax.swing.ImageIcon(getClass().getResource("/macgui/ok-icon.png"))); // NOI18N

        f3ko.setIcon(new javax.swing.ImageIcon(getClass().getResource("/macgui/Actions-window-close-icon.png"))); // NOI18N

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/macgui/logocl.png"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(77, 77, 77)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(type, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(branchcod)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(52, 52, 52)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(f3ok)
                                        .addGap(26, 26, 26)
                                        .addComponent(f3ko))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 128, Short.MAX_VALUE))
                                        .addGap(31, 31, 31)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(f2ok)
                                                .addGap(26, 26, 26)
                                                .addComponent(f2ko))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(f1ok)
                                                .addGap(26, 26, 26)
                                                .addComponent(f1ko))))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(46, 46, 46)
                                .addComponent(jLabel1))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(jLabel4)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addComponent(branchcod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3)
                    .addComponent(type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(f1ok)
                    .addComponent(f1ko))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(f2ok)
                    .addComponent(f2ko))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(f3ok)
                    .addComponent(f3ko))
                .addGap(18, 18, 18)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public boolean faseUNO(String database, String hostfiliale, String filiale) {
        Db dbfiliale = null;
        boolean errore = false;
        String erroredescr = "";

        try {
            System.out.println("PRIMA INSTALLAZIONE");
            Db db = null;
            if (database.equalsIgnoreCase("PRODUZIONE")) {
                //db1 = new Db(hostPROD, false);
                db = new Db(hostPROD, false);
            } else {
                db = new Db(hostTEST, false);
            }
            DatabaseMetaData dbMetaData = db.getC().getMetaData();
            ArrayList<String> elencotabelle = new ArrayList<>();
            ResultSet rs = dbMetaData.getTables(null, null, "%", null);
            while (rs.next()) {
                elencotabelle.add(rs.getString(3));
            }
            db.closeDB();

            int ctntabupdate = 0;
            for (int i = 0; i < elencotabelle.size(); i++) {
                System.out.println("avanzamento.....  " + i);
                errore = false;
                erroredescr = "";
                String sql = "";
                String sql1 = "";
                ResultSet rs1 = null;
                ArrayList<String> elencocolonne = new ArrayList();
                String tablename = elencotabelle.get(i);

                if (tablename.equals("agenzie")
                        || tablename.equals("bank")
                        || tablename.equals("branchbudget")
                        || tablename.equals("branchgroup")
                        || tablename.equals("anagrafica_ru")
                        || tablename.equals("province")
                        || tablename.equals("bce_year")
                        || tablename.equals("blacklist")
                        || tablename.equals("branch")
                        || tablename.equals("carte_credito")
                        || tablename.equals("cash_perm")
                        || tablename.equals("codici_fiscali_esteri")
                        //                        || tablename.equals("codici_fiscali_italia")
                        || tablename.equals("codici_fiscali_mese")
                        || tablename.equals("commissione_fissa")
                        //                        || tablename.equals("compro")
                        //                        || tablename.equals("comuni_apm")
                        || tablename.equals("conf")
                        || tablename.equals("configmonitor")
                        || tablename.equals("contabilita")
                        || tablename.equals("internetbooking")
                        || tablename.equals("kind_commissione_fissa")
                        || tablename.equals("logical")
                        || tablename.equals("nazioni")
                        || tablename.equals("nc_kind")
                        || tablename.equals("office")
                        || tablename.equals("pages")
                        || tablename.equals("path")
                        || tablename.equals("paymat")
                        || tablename.equals("select_g01")
                        || tablename.equals("select_g02")
                        || tablename.equals("select_g03")
                        || tablename.equals("select_rv")
                        || tablename.equals("selectareanaz")
                        || tablename.equals("selectdoctrans")
                        || tablename.equals("selectgroupbranch")
                        || tablename.equals("selectgrouptype")
                        || tablename.equals("selectinout")
                        || tablename.equals("selectkind")
                        || tablename.equals("selectlevelrate")
                        || tablename.equals("selectncde")
                        || tablename.equals("selectresident")
                        || tablename.equals("selecttipocliente")
                        || tablename.equals("selecttipov")
                        || tablename.equals("temppaymat")
                        || tablename.equals("tipologiaclienti")
                        || tablename.equals("tipologiadocumento")
                        || tablename.equals("under_min_comm_justify")
                        || tablename.equals("user_sito")
                        || tablename.equals("users")
                        || tablename.equals("vatcode")) {

                    dbfiliale = new Db(hostfiliale, true);
                    if (dbfiliale.getC() != null) {
                        dbfiliale.setDim();
                        ctntabupdate++;
                        sql = "show columns from " + tablename;
                        System.out.println(sql);
                        if (database.equalsIgnoreCase("PRODUZIONE")) {
                            //db1 = new Db(hostPROD, false);
                            db = new Db(hostPROD, false);
                        } else {
                            db = new Db(hostTEST, false);
                        }
                        rs1 = db.getData(sql);
                        if (rs1 != null) {
                            while (rs1.next()) {
                                elencocolonne.add(rs1.getString(1));
                            }
                            sql = "SELECT ";
                            for (int g = 0; g < elencocolonne.size(); g++) {
                                if (g == elencocolonne.size() - 1) {
                                    sql += elencocolonne.get(g) + " ";
                                } else {
                                    sql += elencocolonne.get(g) + " , ";
                                }
                            }
                            sql += " FROM " + tablename;
                            Db db1 = null;
                            if (database.equalsIgnoreCase("PRODUZIONE")) {
                                //db1 = new Db(hostPROD, false);
                                db1 = new Db(hostPROD, false);
                            } else {
                                db1 = new Db(hostTEST, false);
                            }

                            rs1 = db1.getData(sql);
                            if (rs1 != null) {
                                sql1 = "INSERT INTO " + tablename + " (";
                                for (int v = 0; v < elencocolonne.size(); v++) {
                                    if (v == elencocolonne.size() - 1) {
                                        sql1 += elencocolonne.get(v) + ") VALUES (";
                                    } else {
                                        sql1 += elencocolonne.get(v) + ",";
                                    }
                                }
                                for (int v = 0; v < elencocolonne.size(); v++) {
                                    if (v == elencocolonne.size() - 1) {
                                        sql1 += "?)";
                                    } else {
                                        sql1 += "?,";
                                    }
                                }

                                String[] ris = new String[3];
                                ris[0] = "true";
                                ris[1] = "";
                                ris[2] = "";
                                while (rs1.next() && ris[0].equals("true")) {
                                    ris = dbfiliale.addInfo(rs1, sql1, elencocolonne.size());
                                }
                                if (!ris[0].equals("true")) {
                                    errore = true;
                                    erroredescr = "5.Errore in query " + sql1;
                                    System.out.println(erroredescr);
                                    System.out.println(ris[1]);
                                    System.out.println(ris[2]);
                                    break;
                                }

                                if (tablename.equals("path")) {
                                    ris = new String[3];
                                    ris[0] = "true";
                                    ris[1] = "";
                                    ris[2] = "";
                                    sql1 = "UPDATE path SET descr = 'C:\\\\Maccorp\\\\temp\\\\' where cod = 'temp' ";
                                    dbfiliale.addInfo(sql1);
                                    if (!ris[0].equals("true")) {
                                        errore = true;
                                        erroredescr = "7.Errore in query " + sql1;
                                        System.out.println(erroredescr);
                                        System.out.println(ris[1]);
                                        System.out.println(ris[2]);
                                        break;
                                    }

                                }

                                dbfiliale.closeDB();
                                System.out.println("END table " + tablename + "\n");
                            } else {
                                errore = true;
                                erroredescr = "4.Errore in query " + sql;
                                System.out.println(erroredescr);
                                break;
                            }
                            db1.closeDB();

                        } else {
                            errore = true;
                            erroredescr = "3.Errore in query " + sql;
                            System.out.println(erroredescr);
                            break;
                        }
                        db.closeDB();

                    }//if dbfiliale !=null
                    else {
                        erroredescr = "2.Errore Connessione a DB filiale " + filiale;
                        errore = true;
                        System.out.println(erroredescr + "\n");
                        break;
                    }
                } else {
                    //qui vanno le altre tabelle distinte per filiale

                }

            }//for elencotabelle

            System.out.println("NUMERO DI TABELLE AGGIORNATE: " + ctntabupdate);
            if (errore) {
//                if (!erroredescr.startsWith("1.")) { //se almeno mi sono collegato al DB centrale e se sto installando la prima volta
//                    eseguiresettabelleUNO(dbfiliale, elencotabelle);
//                }
//                dbfiliale.closeDB();
                System.err.println(erroredescr);
                System.err.println("Si sono verificati errori durante l'operazione di inizializzazione dei dati sul DB.");
                System.err.println("Il DB è stato resettato");
            }
            System.out.println("-----------------   END   ------------------------------");
        } catch (Exception e) {
            e.printStackTrace();
        }

        System.out.println("-----------------   END   ------------------------------");
        return errore;

    }

    public boolean faseDUE(String database, String hostfiliale, String filiale) {

        Db dbfiliale = null;
        boolean errore = false;
        String erroredescr = "";
        try {
            System.out.println("UPDATE TABELLE BASE");
            System.out.println(hostfiliale);
            Db db = null;
            if (database.equalsIgnoreCase("PRODUZIONE")) {
                db = new Db(hostPROD, false);
            } else {
                db = new Db(hostTEST, false);
            }
            DatabaseMetaData dbMetaData = db.getC().getMetaData();
            ArrayList<String> elencotabelle = new ArrayList<>();
            ResultSet rs = dbMetaData.getTables(null, null, "%", null);
            while (rs.next()) {
                elencotabelle.add(rs.getString(3));
            }
            db.closeDB();

            int cnttableupdate = 0;
            for (int i = 0; i < elencotabelle.size(); i++) {

                System.out.println("avanzamento.....  " + i);

                errore = false;
                erroredescr = "";

                String sql = "";
                String sql1 = "";
                ResultSet rs1 = null;
                ArrayList<String> elencocolonne = new ArrayList();
                String tablename = elencotabelle.get(i);

                if (tablename.equals("codici_sblocco")
                        || tablename.equals("codici_sblocco_file")
                        || tablename.equals("transaction_reprint")) {
                    dbfiliale = new Db(hostfiliale, true);
                    if (dbfiliale.getC() != null) {
                        dbfiliale.setDim();
                        cnttableupdate++;
                        sql = "show columns from " + tablename;
                        System.out.println(sql);

                        if (database.equalsIgnoreCase("PRODUZIONE")) {
                            //db1 = new Db(hostPROD, false);
                            db = new Db(hostPROD, false);
                        } else {
                            db = new Db(hostTEST, false);
                        }
                        rs1 = db.getData(sql);
                        if (rs1 != null) {
                            while (rs1.next()) {
                                elencocolonne.add(rs1.getString(1));
                            }

                            sql = "SELECT ";
                            for (int g = 0; g < elencocolonne.size(); g++) {
                                if (g == elencocolonne.size() - 1) {
                                    sql += elencocolonne.get(g) + " ";
                                } else {
                                    sql += elencocolonne.get(g) + " , ";
                                }
                            }
                            sql += " FROM " + tablename;
                            if (tablename.equals("codici_sblocco")) {
                                sql += " WHERE dt_gen >= DATE_SUB(NOW(),INTERVAL 1 YEAR);";
                            }
                            if (tablename.equals("codici_sblocco_file")) {
                                sql += " WHERE dt_oper >= DATE_SUB(NOW(),INTERVAL 1 YEAR);";
                            }
                            if (tablename.equals("transaction_reprint")) {
                                sql += " WHERE date >= DATE_SUB(NOW(),INTERVAL 1 YEAR);";
                            }
                            Db db1 = null;
                            if (database.equalsIgnoreCase("PRODUZIONE")) {
                                //db1 = new Db(hostPROD, false);
                                db1 = new Db(hostPROD, false);
                            } else {
                                db1 = new Db(hostTEST, false);
                            }
                            rs1 = db1.getData(sql);
                            if (rs1 != null) {
                                sql1 = "INSERT INTO " + tablename + " (";
                                for (int v = 0; v < elencocolonne.size(); v++) {
                                    if (v == elencocolonne.size() - 1) {
                                        sql1 += elencocolonne.get(v) + ") VALUES (";
                                    } else {
                                        sql1 += elencocolonne.get(v) + ",";
                                    }
                                }
                                for (int v = 0; v < elencocolonne.size(); v++) {
                                    if (v == elencocolonne.size() - 1) {
                                        sql1 += "?)";
                                    } else {
                                        sql1 += "?,";
                                    }
                                }
                                System.out.println("doing insert...");
                                String[] ris = new String[3];
                                ris[0] = "true";
                                ris[1] = "";
                                ris[2] = "";
                                while (rs1.next() && ris[0].equals("true")) {
                                    ris = dbfiliale.addInfo(rs1, sql1, elencocolonne.size());
//                        System.out.println("doing.....");
                                }
                                if (!ris[0].equals("true")) {
                                    errore = true;
                                    erroredescr = "5.Errore in query " + sql1;
                                    System.out.println(erroredescr + "\n");
                                    System.out.println(ris[1] + "\n");
                                    System.out.println(ris[2] + "\n");
                                    break;
                                }
                                System.out.println("");
                                System.out.println("END table " + tablename);
                            } else {
                                errore = true;
                                erroredescr = "4.Errore in query " + sql;
                                System.err.println(erroredescr);
                                break;
                            }
                            db1.closeDB();

                        } else {
                            errore = true;
                            erroredescr = "3.Errore in query " + sql;
                            System.err.println(erroredescr);
                            break;
                        }
                        db.closeDB();

                    }//if dbfiliale !=null
                    else {
                        erroredescr = "2.Errore Connessione a DB filiale " + filiale;
                        System.err.println(erroredescr);
                        errore = true;
                        break;
                    }

                } else {

                    dbfiliale = new Db(hostfiliale, true);
                    if (dbfiliale.getC() != null) {
                        dbfiliale.setDim();
                        if (tablename.equals("newsletter_status")) {
                            cnttableupdate++;
                            sql = "show columns from " + tablename;
                            System.out.println(sql);
                            if (database.equalsIgnoreCase("PRODUZIONE")) {
                                //db1 = new Db(hostPROD, false);
                                db = new Db(hostPROD, false);
                            } else {
                                db = new Db(hostTEST, false);
                            }
                            rs1 = db.getData(sql);
                            if (rs1 != null) {
                                while (rs1.next()) {
                                    elencocolonne.add(rs1.getString(1));
                                }

                                sql = "SELECT ";
                                for (int g = 0; g < elencocolonne.size(); g++) {
                                    if (g == elencocolonne.size() - 1) {
                                        sql += elencocolonne.get(g) + " ";
                                    } else {
                                        sql += elencocolonne.get(g) + " , ";
                                    }
                                }
                                sql += " FROM " + tablename;
                                sql += " WHERE cod IN ( SELECT cod FROM newsletter WHERE dt_upload >= DATE_SUB(NOW(),INTERVAL 1 YEAR)); ";
                                System.out.println(sql);
                                Db db1 = null;
                                if (database.equalsIgnoreCase("PRODUZIONE")) {
                                    //db1 = new Db(hostPROD, false);
                                    db1 = new Db(hostPROD, false);
                                } else {
                                    db1 = new Db(hostTEST, false);
                                }

                                rs1 = db1.getData(sql);
                                if (rs1 != null) {
                                    sql1 = "INSERT INTO " + tablename + " (";
                                    for (int v = 0; v < elencocolonne.size(); v++) {
                                        if (v == elencocolonne.size() - 1) {
                                            sql1 += elencocolonne.get(v) + ") VALUES (";
                                        } else {
                                            sql1 += elencocolonne.get(v) + ",";
                                        }
                                    }
                                    for (int v = 0; v < elencocolonne.size(); v++) {
                                        if (v == elencocolonne.size() - 1) {
                                            sql1 += "?)";
                                        } else {
                                            sql1 += "?,";
                                        }
                                    }
                                    System.out.println("doing insert...");
                                    String[] ris = new String[3];
                                    ris[0] = "true";
                                    ris[1] = "";
                                    ris[2] = "";
                                    while (rs1.next() && ris[0].equals("true")) {
                                        ris = dbfiliale.addInfo(rs1, sql1, elencocolonne.size());
                                        if (!ris[0].equals("true")) {
                                            errore = true;
                                            erroredescr = "5.Errore in query " + sql1;
                                            System.out.println(erroredescr + "\n");
                                            System.out.println(ris[1] + "\n");
                                            System.out.println(ris[2] + "\n");
                                            break;
                                        }
                                    }
                                    System.out.println("END table " + tablename);
                                } else {
                                    errore = true;
                                    erroredescr = "4.Errore in query " + sql;
                                    System.err.println(erroredescr);
                                    break;
                                }
                                db1.closeDB();

                            } else {
                                errore = true;
                                erroredescr = "3.Errore in query " + sql;
                                System.err.println(erroredescr);
                                break;
                            }
                            db.closeDB();

                        } else if (tablename.equals("newsletter")) {

                            cnttableupdate++;
                            sql = "show columns from " + tablename;
                            System.out.println(sql);
                            if (database.equalsIgnoreCase("PRODUZIONE")) {
                                //db1 = new Db(hostPROD, false);
                                db = new Db(hostPROD, false);
                            } else {
                                db = new Db(hostTEST, false);
                            }
                            rs1 = db.getData(sql);
                            if (rs1 != null) {
                                while (rs1.next()) {
                                    elencocolonne.add(rs1.getString(1));
                                }

                                sql = "SELECT ";
                                for (int g = 0; g < elencocolonne.size(); g++) {
                                    if (g == elencocolonne.size() - 1) {
                                        sql += elencocolonne.get(g) + " ";
                                    } else {
                                        sql += elencocolonne.get(g) + " , ";
                                    }
                                }
                                sql += " FROM " + tablename;
                                sql += " WHERE dt_upload >= DATE_SUB(NOW(),INTERVAL 1 YEAR);";
                                System.out.println(sql);
                                Db db1 = null;
                                if (database.equalsIgnoreCase("PRODUZIONE")) {
                                    //db1 = new Db(hostPROD, false);
                                    db1 = new Db(hostPROD, false);
                                } else {
                                    db1 = new Db(hostTEST, false);
                                }
                                rs1 = db1.getData(sql);
                                if (rs1 != null) {
                                    sql1 = "INSERT INTO " + tablename + " (";
                                    for (int v = 0; v < elencocolonne.size(); v++) {
                                        if (v == elencocolonne.size() - 1) {
                                            sql1 += elencocolonne.get(v) + ") VALUES (";
                                        } else {
                                            sql1 += elencocolonne.get(v) + ",";
                                        }
                                    }
                                    for (int v = 0; v < elencocolonne.size(); v++) {
                                        if (v == elencocolonne.size() - 1) {
                                            sql1 += "?)";
                                        } else {
                                            sql1 += "?,";
                                        }
                                    }
                                    System.out.println("doing insert...");
                                    String[] ris = new String[3];
                                    ris[0] = "true";
                                    ris[1] = "";
                                    ris[2] = "";
                                    while (rs1.next() && ris[0].equals("true")) {
                                        ris = dbfiliale.addInfo(rs1, sql1, elencocolonne.size());
//                        System.out.println("doing.....");
                                    }
                                    if (!ris[0].equals("true")) {
                                        errore = true;
                                        erroredescr = "5.Errore in query " + sql1;
                                        System.out.println(erroredescr + "\n");
                                        System.out.println(ris[1] + "\n");
                                        System.out.println(ris[2] + "\n");
                                        break;
                                    }

                                    
                                    System.out.println("");
                                    System.out.println("END table " + tablename);

                                } else {
                                    errore = true;
                                    erroredescr = "4.Errore in query " + sql;
                                    System.err.println(erroredescr);
                                    break;
                                }
                                db1.closeDB();

                            } else {
                                errore = true;
                                erroredescr = "3.Errore in query " + sql;
                                System.err.println(erroredescr);
                                break;
                            }
                            db.closeDB();
                        }
                        if (tablename.equals("local")) {
                            cnttableupdate++;
                            String[] ris = new String[3];
                            ris[0] = "true";
                            ris[1] = "";
                            ris[2] = "";
                            sql1 = "INSERT INTO " + tablename + " (cod) VALUES ('" + filiale + "')";
                            dbfiliale.addInfo(sql1);
                            if (!ris[0].equals("true")) {
                                errore = true;
                                erroredescr = "6.Errore in query " + sql1;
                                System.out.println(erroredescr + "\n");
                                System.out.println(ris[1] + "\n");
                                System.out.println(ris[2] + "\n");
                                break;
                            }
                        }
                    }
                }
            }//for elencotabelle
            System.out.println("NUMERO DI TABELLE AGGIORNATE: " + cnttableupdate);
            if (errore) {
//                if (!erroredescr.startsWith("1.")) { //se almeno mi sono collegato al DB centrale e se sto installando la prima volta
//                    eseguiresettabelleDUE(dbfiliale, elencotabelle);
//                    dbfiliale.closeDB();
//                }
                System.err.println("Si sono verificati errori durante l'operazione di inizializzazione dei dati sul DB.");
            }
            System.out.println("END " + "\n");
        } catch (SQLException e) {
            e.printStackTrace();
        }
        System.out.println("-----------------   END   ------------------------------");
        return errore;

    }

    public boolean faseTRE(String database, String hostfiliale, String filiale) {
        Db dbfiliale = null;
        boolean errore = false;
        String erroredescr = "";
        int cnttableupdate = 0;
        try {
            System.out.println("UPDATE TABELLE PER FILIALE");

            Db db = null;
            if (database.equalsIgnoreCase("PRODUZIONE")) {
                //db1 = new Db(hostPROD, false);
                db = new Db(hostPROD, false);
            } else {
                db = new Db(hostTEST, false);
            }
            DatabaseMetaData dbMetaData = db.getC().getMetaData();
            ArrayList<String> elencotabelle = new ArrayList<>();
            ResultSet rs = dbMetaData.getTables(null, null, "%", null);
            while (rs.next()) {
                elencotabelle.add(rs.getString(3));
            }
            db.closeDB();
            int ctntabupdate = 0;
            for (int i = 0; i < elencotabelle.size(); i++) {
                System.out.println("avanzamento.....  " + i);
                errore = false;
                erroredescr = "";
                String sql = "";
                String sql1 = "";
                ResultSet rs1 = null;
                ArrayList<String> elencocolonne = new ArrayList();
                String tablename = elencotabelle.get(i);

                if (tablename.equals("ch_transaction")
                        || tablename.equals("et_change")
                        || tablename.equals("it_change")
                        || tablename.equals("oc_lista")
                        || tablename.equals("office_sp")) {
                    if (database.equalsIgnoreCase("PRODUZIONE")) {
                        //db1 = new Db(hostPROD, false);
                        db = new Db(hostPROD, false);
                    } else {
                        db = new Db(hostTEST, false);
                    }
                    cnttableupdate++;
                    sql = "show columns from " + tablename;
                    System.out.println(sql);
                    rs1 = db.getData(sql);
                    if (rs1 != null) {
                        while (rs1.next()) {
                            elencocolonne.add(rs1.getString(1));
                        }

                        sql = "SELECT ";
                        for (int g = 0; g < elencocolonne.size(); g++) {
                            if (g == elencocolonne.size() - 1) {
                                sql += elencocolonne.get(g) + " ";
                            } else {
                                sql += elencocolonne.get(g) + " , ";
                            }
                        }
                        sql += " FROM " + tablename;
                        sql += " WHERE filiale = '" + filiale + "'";
                        System.out.println(sql);

                        Db db1 = null;
                        if (database.equalsIgnoreCase("PRODUZIONE")) {
                            //db1 = new Db(hostPROD, false);
                            db1 = new Db(hostPROD, false);
                        } else {
                            db1 = new Db(hostTEST, false);
                        }
                        rs1 = db1.getData(sql);
                        if (rs1 != null) {
                            sql1 = "INSERT INTO " + tablename + " (";
                            for (int v = 0; v < elencocolonne.size(); v++) {
                                if (v == elencocolonne.size() - 1) {
                                    sql1 += elencocolonne.get(v) + ") VALUES (";
                                } else {
                                    sql1 += elencocolonne.get(v) + ",";
                                }
                            }
                            for (int v = 0; v < elencocolonne.size(); v++) {
                                if (v == elencocolonne.size() - 1) {
                                    sql1 += "?)";
                                } else {
                                    sql1 += "?,";
                                }
                            }
                            System.out.println("doing insert...");
                            String[] ris = new String[3];
                            ris[0] = "true";
                            ris[1] = "";
                            ris[2] = "";
                            dbfiliale = new Db(hostfiliale, true);
                            if (dbfiliale.getC() != null) {
                                dbfiliale.setDim();
                                while (rs1.next() && ris[0].equals("true")) {
                                    ris = dbfiliale.addInfo(rs1, sql1, elencocolonne.size());
                                }
                                if (!ris[0].equals("true")) {
                                    errore = true;
                                    erroredescr = "5.Errore in query " + sql1;
                                    System.out.println(erroredescr + "\n");
                                    System.out.println(ris[1] + "\n");
                                    System.out.println(ris[2] + "\n");
                                    break;

                                }
                                dbfiliale.closeDB();
                            }
                            System.out.println("END table " + tablename);
                        } else {
                            errore = true;
                            erroredescr = "4.Errore in query " + sql;
                            System.err.println(erroredescr);
                            break;
                        }
                        db1.closeDB();
                    } else {
                        errore = true;
                        erroredescr = "3.Errore in query " + sql;
                        System.err.println(erroredescr);
                        break;
                    }
                    db.closeDB();
                }

                if ( //ultimo anno con insert in altre tabelle                           
                        tablename.equals("ch_transaction_temp")) {
                    if (database.equalsIgnoreCase("PRODUZIONE")) {
                        //db1 = new Db(hostPROD, false);
                        db = new Db(hostPROD, false);
                    } else {
                        db = new Db(hostTEST, false);
                    }
                    cnttableupdate++;
                    sql = "show columns from " + tablename;
                    System.out.println(sql);

                    rs1 = db.getData(sql);
                    if (rs1 != null) {
                        while (rs1.next()) {
                            elencocolonne.add(rs1.getString(1));
                        }
                        sql = "SELECT ";
                        for (int g = 0; g < elencocolonne.size(); g++) {
                            if (g == elencocolonne.size() - 1) {
                                sql += elencocolonne.get(g) + " ";
                            } else {
                                sql += elencocolonne.get(g) + " , ";
                            }
                        }
                        sql += " FROM " + tablename;
                        sql += " WHERE filiale = '" + filiale + "' AND cod IN ( SELECT cod FROM ch_transaction WHERE filiale = '" + filiale + "'); ";
                        System.out.println(sql);

                        Db db1 = null;
                        if (database.equalsIgnoreCase("PRODUZIONE")) {
                            //db1 = new Db(hostPROD, false);
                            db1 = new Db(hostPROD, false);
                        } else {
                            db1 = new Db(hostTEST, false);
                        }
                        rs1 = db1.getData(sql);
                        if (rs1 != null) {
                            sql1 = "INSERT INTO " + tablename + " (";
                            for (int v = 0; v < elencocolonne.size(); v++) {
                                if (v == elencocolonne.size() - 1) {
                                    sql1 += elencocolonne.get(v) + ") VALUES (";
                                } else {
                                    sql1 += elencocolonne.get(v) + ",";
                                }
                            }
                            for (int v = 0; v < elencocolonne.size(); v++) {
                                if (v == elencocolonne.size() - 1) {
                                    sql1 += "?)";
                                } else {
                                    sql1 += "?,";
                                }
                            }
                            System.out.println("doing insert...");
                            String[] ris = new String[3];
                            ris[0] = "true";
                            ris[1] = "";
                            ris[2] = "";
                            dbfiliale = new Db(hostfiliale, true);
                            if (dbfiliale.getC() != null) {
                                dbfiliale.setDim();
                                while (rs1.next() && ris[0].equals("true")) {
                                    ris = dbfiliale.addInfo(rs1, sql1, elencocolonne.size());
                                }
                                if (!ris[0].equals("true")) {
                                    errore = true;
                                    erroredescr = "5.Errore in query " + sql1;
                                    System.out.println(erroredescr + "\n");
                                    System.out.println(ris[1] + "\n");
                                    System.out.println(ris[2] + "\n");
                                    break;
                                }
                                dbfiliale.closeDB();
                            }
                            System.out.println("END table " + tablename);
                            db.closeDB();

                        } else {
                            errore = true;
                            erroredescr = "4.Errore in query " + sql;
                            System.err.println(erroredescr);
                            break;
                        }
                        db1.closeDB();

                    } else {
                        errore = true;
                        erroredescr = "3.Errore in query " + sql;
                        System.err.println(erroredescr);
                        break;
                    }
                    db.closeDB();
                }

                if ( //ultimo anno con insert in altre tabelle
                        tablename.equals("ch_transaction_refund")
                        || tablename.equals("ch_transaction_file")
                        || tablename.equals("ch_transaction_valori")) {
                    if (database.equalsIgnoreCase("PRODUZIONE")) {
                        //db1 = new Db(hostPROD, false);
                        db = new Db(hostPROD, false);
                    } else {
                        db = new Db(hostTEST, false);
                    }
                    cnttableupdate++;
                    sql = "show columns from " + tablename;
                    System.out.println(sql);
                    rs1 = db.getData(sql);
                    if (rs1 != null) {
                        while (rs1.next()) {
                            elencocolonne.add(rs1.getString(1));
                        }

                        sql = "SELECT ";
                        for (int g = 0; g < elencocolonne.size(); g++) {
                            if (g == elencocolonne.size() - 1) {
                                sql += elencocolonne.get(g) + " ";
                            } else {
                                sql += elencocolonne.get(g) + " , ";
                            }
                        }
                        sql += " FROM " + tablename;
                        sql += " WHERE  cod_tr IN ( SELECT cod FROM ch_transaction WHERE filiale = '" + filiale + "' AND data >= DATE_SUB(NOW(),INTERVAL 1 YEAR)); ";
                        System.out.println(sql);
                        Db db1 = null;
                        if (database.equalsIgnoreCase("PRODUZIONE")) {
                            //db1 = new Db(hostPROD, false);
                            db1 = new Db(hostPROD, false);
                        } else {
                            db1 = new Db(hostTEST, false);
                        }
                        rs1 = db1.getData(sql);
                        if (rs1 != null) {
                            sql1 = "INSERT INTO " + tablename + " (";
                            for (int v = 0; v < elencocolonne.size(); v++) {
                                if (v == elencocolonne.size() - 1) {
                                    sql1 += elencocolonne.get(v) + ") VALUES (";
                                } else {
                                    sql1 += elencocolonne.get(v) + ",";
                                }
                            }
                            for (int v = 0; v < elencocolonne.size(); v++) {
                                if (v == elencocolonne.size() - 1) {
                                    sql1 += "?)";
                                } else {
                                    sql1 += "?,";
                                }
                            }
                            System.out.println("doing insert...");
                            String[] ris = new String[3];
                            ris[0] = "true";
                            ris[1] = "";
                            ris[2] = "";
                            dbfiliale = new Db(hostfiliale, true);
                            if (dbfiliale.getC() != null) {
                                dbfiliale.setDim();
                                while (rs1.next() && ris[0].equals("true")) {
                                    ris = dbfiliale.addInfo(rs1, sql1, elencocolonne.size());
                                }
                                if (!ris[0].equals("true")) {
                                    errore = true;
                                    erroredescr = "5.Errore in query " + sql1;
                                    System.out.println(erroredescr + "\n");
                                    System.out.println(ris[1] + "\n");
                                    System.out.println(ris[2] + "\n");
                                    break;
                                }
                                dbfiliale.closeDB();
                            }
                            System.out.println("END table " + tablename);
                            db.closeDB();
                        } else {
                            errore = true;
                            erroredescr = "4.Errore in query " + sql;
                            System.err.println(erroredescr);
                            break;
                        }
                        db1.closeDB();

                    } else {
                        errore = true;
                        erroredescr = "3.Errore in query " + sql;
                        System.err.println(erroredescr);
                        break;
                    }
                    db.closeDB();
                }

                if ( //ultimo anno con insert in altre tabelle
                        tablename.equals("et_change_tg")
                        || tablename.equals("et_change_valori")
                        || tablename.equals("et_frombranch")
                        || tablename.equals("et_nochange_valori")) {
                    cnttableupdate++;
                    sql = "show columns from " + tablename;
                    System.out.println(sql);
                    if (database.equalsIgnoreCase("PRODUZIONE")) {
                        //db1 = new Db(hostPROD, false);
                        db = new Db(hostPROD, false);
                    } else {
                        db = new Db(hostTEST, false);
                    }
                    rs1 = db.getData(sql);
                    if (rs1 != null) {
                        while (rs1.next()) {
                            elencocolonne.add(rs1.getString(1));
                        }

                        sql = "SELECT ";
                        for (int g = 0; g < elencocolonne.size(); g++) {
                            if (g == elencocolonne.size() - 1) {
                                sql += elencocolonne.get(g) + " ";
                            } else {
                                sql += elencocolonne.get(g) + " , ";
                            }
                        }
                        sql += " FROM " + tablename;
                        sql += " WHERE filiale = '" + filiale + "' AND cod IN ( SELECT cod FROM et_change WHERE filiale = '" + filiale + "' AND dt_it >= DATE_SUB(NOW(),INTERVAL 1 YEAR)); ";
                        System.out.println(sql);

                        Db db1 = null;
                        if (database.equalsIgnoreCase("PRODUZIONE")) {
                            //db1 = new Db(hostPROD, false);
                            db1 = new Db(hostPROD, false);
                        } else {
                            db1 = new Db(hostTEST, false);
                        }
                        rs1 = db1.getData(sql);
                        if (rs1 != null) {
                            sql1 = "INSERT INTO " + tablename + " (";
                            for (int v = 0; v < elencocolonne.size(); v++) {
                                if (v == elencocolonne.size() - 1) {
                                    sql1 += elencocolonne.get(v) + ") VALUES (";
                                } else {
                                    sql1 += elencocolonne.get(v) + ",";
                                }
                            }
                            for (int v = 0; v < elencocolonne.size(); v++) {
                                if (v == elencocolonne.size() - 1) {
                                    sql1 += "?)";
                                } else {
                                    sql1 += "?,";
                                }
                            }
                            System.out.println("doing insert...");
                            String[] ris = new String[3];
                            ris[0] = "true";
                            ris[1] = "";
                            ris[2] = "";
                            dbfiliale = new Db(hostfiliale, true);
                            if (dbfiliale.getC() != null) {
                                dbfiliale.setDim();
                                while (rs1.next() && ris[0].equals("true")) {
                                    ris = dbfiliale.addInfo(rs1, sql1, elencocolonne.size());
                                }
                                if (!ris[0].equals("true")) {
                                    errore = true;
                                    erroredescr = "5.Errore in query " + sql1;
                                    System.out.println(erroredescr + "\n");
                                    System.out.println(ris[1] + "\n");
                                    System.out.println(ris[2] + "\n");
                                    break;
                                }
                                dbfiliale.closeDB();
                            }
                            System.out.println("END table " + tablename);

                        } else {
                            errore = true;
                            erroredescr = "4.Errore in query " + sql;
                            System.err.println(erroredescr);
                            break;
                        }
                        db1.closeDB();

                    } else {
                        errore = true;
                        erroredescr = "3.Errore in query " + sql;
                        System.err.println(erroredescr);
                        break;
                    }
                    db.closeDB();

                }

                if (tablename.equals("it_change_tg")
                        || tablename.equals("it_change_valori")
                        || tablename.equals("it_nochange_valori")) {

                    if (database.equalsIgnoreCase("PRODUZIONE")) {
                        //db1 = new Db(hostPROD, false);
                        db = new Db(hostPROD, false);
                    } else {
                        db = new Db(hostTEST, false);
                    }
                    cnttableupdate++;
                    sql = "show columns from " + tablename;
                    System.out.println(sql);
                    rs1 = db.getData(sql);
                    if (rs1 != null) {
                        while (rs1.next()) {
                            elencocolonne.add(rs1.getString(1));
                        }

                        sql = "SELECT ";
                        for (int g = 0; g < elencocolonne.size(); g++) {
                            if (g == elencocolonne.size() - 1) {
                                sql += elencocolonne.get(g) + " ";
                            } else {
                                sql += elencocolonne.get(g) + " , ";
                            }
                        }
                        sql += " FROM " + tablename;
                        sql += " WHERE filiale = '" + filiale + "' AND cod IN ( SELECT cod FROM it_change WHERE filiale = '" + filiale + "' AND dt_it >= DATE_SUB(NOW(),INTERVAL 1 YEAR)); ";
                        System.out.println(sql);

                        Db db1 = null;
                        if (database.equalsIgnoreCase("PRODUZIONE")) {
                            //db1 = new Db(hostPROD, false);
                            db1 = new Db(hostPROD, false);
                        } else {
                            db1 = new Db(hostTEST, false);
                        }

                        rs1 = db1.getData(sql);
                        if (rs1 != null) {
                            sql1 = "INSERT INTO " + tablename + " (";
                            for (int v = 0; v < elencocolonne.size(); v++) {
                                if (v == elencocolonne.size() - 1) {
                                    sql1 += elencocolonne.get(v) + ") VALUES (";
                                } else {
                                    sql1 += elencocolonne.get(v) + ",";
                                }
                            }
                            for (int v = 0; v < elencocolonne.size(); v++) {
                                if (v == elencocolonne.size() - 1) {
                                    sql1 += "?)";
                                } else {
                                    sql1 += "?,";
                                }
                            }
                            System.out.println("doing insert...");
                            String[] ris = new String[3];
                            ris[0] = "true";
                            ris[1] = "";
                            ris[2] = "";
                            dbfiliale = new Db(hostfiliale, true);
                            if (dbfiliale.getC() != null) {
                                dbfiliale.setDim();
                                while (rs1.next() && ris[0].equals("true")) {
                                    ris = dbfiliale.addInfo(rs1, sql1, elencocolonne.size());
//                        System.out.println("doing.....");
                                }
                                if (!ris[0].equals("true")) {
                                    errore = true;
                                    erroredescr = "5.Errore in query " + sql1;
                                    System.out.println(erroredescr + "\n");
                                    System.out.println(ris[1] + "\n");
                                    System.out.println(ris[2] + "\n");
                                    break;
                                }
                                dbfiliale.closeDB();
                            }

                            System.out.println("END table " + tablename);
                            db.closeDB();

                        } else {
                            errore = true;
                            erroredescr = "4.Errore in query " + sql;
                            System.err.println(erroredescr);
                            break;
                        }
                        db1.closeDB();
                    } else {
                        errore = true;
                        erroredescr = "3.Errore in query " + sql;
                        System.err.println(erroredescr);
                        break;
                    }
                    db.closeDB();
                }

                if ( //ultimo anno con insert in altre tabelle
                        tablename.equals("oc_change")
                        || tablename.equals("oc_change_tg")
                        || tablename.equals("oc_errors")
                        || tablename.equals("oc_nochange")
                        || tablename.equals("oc_pos")
                        || tablename.equals("real_oc_change")
                        || tablename.equals("real_oc_change_tg")
                        || tablename.equals("real_oc_nochange")
                        || tablename.equals("real_oc_pos")) {

                    cnttableupdate++;
                    sql = "show columns from " + tablename;
                    System.out.println(sql);
                    if (database.equalsIgnoreCase("PRODUZIONE")) {
                        //db1 = new Db(hostPROD, false);
                        db = new Db(hostPROD, false);
                    } else {
                        db = new Db(hostTEST, false);
                    }
                    rs1 = db.getData(sql);
                    if (rs1 != null) {
                        while (rs1.next()) {
                            elencocolonne.add(rs1.getString(1));
                        }

                        sql = "SELECT ";
                        for (int g = 0; g < elencocolonne.size(); g++) {
                            if (g == elencocolonne.size() - 1) {
                                sql += elencocolonne.get(g) + " ";
                            } else {
                                sql += elencocolonne.get(g) + " , ";
                            }
                        }
                        sql += " FROM " + tablename;
                        if (tablename.equals("oc_errors")) {
                            sql += " WHERE filiale = '" + filiale + "' AND cod IN ( SELECT cod FROM oc_lista WHERE filiale = '" + filiale + "' AND data >= DATE_SUB(NOW(),INTERVAL 1 YEAR)); ";
                        } else {
                            sql += " WHERE filiale = '" + filiale + "' AND cod_oc IN ( SELECT cod FROM oc_lista WHERE filiale = '" + filiale + "' AND data >= DATE_SUB(NOW(),INTERVAL 1 YEAR)); ";
                        }
                        System.out.println(sql);

                        Db db1 = null;
                        if (database.equalsIgnoreCase("PRODUZIONE")) {
                            //db1 = new Db(hostPROD, false);
                            db1 = new Db(hostPROD, false);
                        } else {
                            db1 = new Db(hostTEST, false);
                        }
                        rs1 = db1.getData(sql);
                        if (rs1 != null) {
                            sql1 = "INSERT INTO " + tablename + " (";
                            for (int v = 0; v < elencocolonne.size(); v++) {
                                if (v == elencocolonne.size() - 1) {
                                    sql1 += elencocolonne.get(v) + ") VALUES (";
                                } else {
                                    sql1 += elencocolonne.get(v) + ",";
                                }
                            }
                            for (int v = 0; v < elencocolonne.size(); v++) {
                                if (v == elencocolonne.size() - 1) {
                                    sql1 += "?)";
                                } else {
                                    sql1 += "?,";
                                }
                            }
                            System.out.println("doing insert...");
                            String[] ris = new String[3];
                            ris[0] = "true";
                            ris[1] = "";
                            ris[2] = "";
                            dbfiliale = new Db(hostfiliale, true);
                            if (dbfiliale.getC() != null) {
                                dbfiliale.setDim();
                                while (rs1.next() && ris[0].equals("true")) {
                                    ris = dbfiliale.addInfo(rs1, sql1, elencocolonne.size());
//                        System.out.println("doing.....");
                                }
                                if (!ris[0].equals("true")) {
                                    errore = true;
                                    erroredescr = "5.Errore in query " + sql1;
                                    System.out.println(erroredescr + "\n");
                                    System.out.println(ris[1] + "\n");
                                    System.out.println(ris[2] + "\n");
                                    break;
                                }
                                dbfiliale.closeDB();
                            }

                            System.out.println("END table " + tablename);
                            db.closeDB();

                        } else {
                            errore = true;
                            erroredescr = "4.Errore in query " + sql;
                            System.err.println(erroredescr);
                            break;
                        }
                        db1.closeDB();
                    } else {
                        errore = true;
                        erroredescr = "3.Errore in query " + sql;
                        System.err.println(erroredescr);
                        break;
                    }
                    db.closeDB();

                }
                if ( //ultimo anno con insert in altre tabelle
                        tablename.equals("stock_quantity")) {

                    cnttableupdate++;
                    sql = "show columns from " + tablename;
                    System.out.println(sql);
                    if (database.equalsIgnoreCase("PRODUZIONE")) {
                        //db1 = new Db(hostPROD, false);
                        db = new Db(hostPROD, false);
                    } else {
                        db = new Db(hostTEST, false);
                    }
                    rs1 = db.getData(sql);
                    if (rs1 != null) {
                        while (rs1.next()) {
                            elencocolonne.add(rs1.getString(1));
                        }

                        sql = "SELECT ";
                        for (int g = 0; g < elencocolonne.size(); g++) {
                            if (g == elencocolonne.size() - 1) {
                                sql += elencocolonne.get(g) + " ";
                            } else {
                                sql += elencocolonne.get(g) + " , ";
                            }
                        }
                        sql += " FROM " + tablename;
                        sql += " WHERE codice_stock IN ( SELECT codice FROM stock_story WHERE filiale = '" + filiale + "' AND date >= DATE_SUB(NOW(),INTERVAL 1 YEAR)); ";
                        System.out.println(sql);
                        Db db1 = null;
                        if (database.equalsIgnoreCase("PRODUZIONE")) {
                            //db1 = new Db(hostPROD, false);
                            db1 = new Db(hostPROD, false);
                        } else {
                            db1 = new Db(hostTEST, false);
                        }
                        rs1 = db1.getData(sql);
                        if (rs1 != null) {
                            sql1 = "INSERT INTO " + tablename + " (";
                            for (int v = 0; v < elencocolonne.size(); v++) {
                                if (v == elencocolonne.size() - 1) {
                                    sql1 += elencocolonne.get(v) + ") VALUES (";
                                } else {
                                    sql1 += elencocolonne.get(v) + ",";
                                }
                            }
                            for (int v = 0; v < elencocolonne.size(); v++) {
                                if (v == elencocolonne.size() - 1) {
                                    sql1 += "?)";
                                } else {
                                    sql1 += "?,";
                                }
                            }
                            System.out.println("doing insert...");
                            String[] ris = new String[3];
                            ris[0] = "true";
                            ris[1] = "";
                            ris[2] = "";
                            dbfiliale = new Db(hostfiliale, true);
                            if (dbfiliale.getC() != null) {
                                dbfiliale.setDim();
                                while (rs1.next() && ris[0].equals("true")) {
                                    ris = dbfiliale.addInfo(rs1, sql1, elencocolonne.size());
                                }
                                if (!ris[0].equals("true")) {
                                    errore = true;
                                    erroredescr = "5.Errore in query " + sql1;
                                    System.out.println(erroredescr + "\n");
                                    System.out.println(ris[1] + "\n");
                                    System.out.println(ris[2] + "\n");
                                    break;
                                }
                                dbfiliale.closeDB();
                            }
                            System.out.println("END table " + tablename);
                        } else {
                            errore = true;
                            erroredescr = "4.Errore in query " + sql;
                            System.err.println(erroredescr);
                            break;
                        }
                        db1.closeDB();

                    } else {
                        errore = true;
                        erroredescr = "3.Errore in query " + sql;
                        System.err.println(erroredescr);
                        break;
                    }
                    db.closeDB();

                }

                if (tablename.equals("office_sp_valori")) {

                    cnttableupdate++;
                    sql = "show columns from " + tablename;
                    System.out.println(sql);
                    if (database.equalsIgnoreCase("PRODUZIONE")) {
                        //db1 = new Db(hostPROD, false);
                        db = new Db(hostPROD, false);
                    } else {
                        db = new Db(hostTEST, false);
                    }
                    rs1 = db.getData(sql);
                    if (rs1 != null) {
                        while (rs1.next()) {
                            elencocolonne.add(rs1.getString(1));
                        }

                        sql = "SELECT ";
                        for (int g = 0; g < elencocolonne.size(); g++) {
                            if (g == elencocolonne.size() - 1) {
                                sql += elencocolonne.get(g) + " ";
                            } else {
                                sql += elencocolonne.get(g) + " , ";
                            }
                        }
                        sql += " FROM " + tablename;
                        sql += " WHERE cod IN ( SELECT codice FROM office_sp WHERE filiale = '" + filiale + "' AND data >= DATE_SUB(NOW(),INTERVAL 1 YEAR)); ";
                        System.out.println(sql);

                        Db db1 = null;
                        if (database.equalsIgnoreCase("PRODUZIONE")) {
                            //db1 = new Db(hostPROD, false);
                            db1 = new Db(hostPROD, false);
                        } else {
                            db1 = new Db(hostTEST, false);
                        }
                        rs1 = db1.getData(sql);
                        if (rs1 != null) {
                            sql1 = "INSERT INTO " + tablename + " (";
                            for (int v = 0; v < elencocolonne.size(); v++) {
                                if (v == elencocolonne.size() - 1) {
                                    sql1 += elencocolonne.get(v) + ") VALUES (";
                                } else {
                                    sql1 += elencocolonne.get(v) + ",";
                                }
                            }
                            for (int v = 0; v < elencocolonne.size(); v++) {
                                if (v == elencocolonne.size() - 1) {
                                    sql1 += "?)";
                                } else {
                                    sql1 += "?,";
                                }
                            }
                            System.out.println("doing insert...");
                            String[] ris = new String[3];
                            ris[0] = "true";
                            ris[1] = "";
                            ris[2] = "";
                            dbfiliale = new Db(hostfiliale, true);
                            if (dbfiliale.getC() != null) {
                                dbfiliale.setDim();
                                while (rs1.next() && ris[0].equals("true")) {
                                    ris = dbfiliale.addInfo(rs1, sql1, elencocolonne.size());
                                }
                                if (!ris[0].equals("true")) {
                                    errore = true;
                                    erroredescr = "5.Errore in query " + sql1;
                                    System.out.println(erroredescr + "\n");
                                    System.out.println(ris[1] + "\n");
                                    System.out.println(ris[2] + "\n");
                                    break;
                                }
                                dbfiliale.closeDB();
                            }
                            System.out.println("END table " + tablename);
                        } else {
                            errore = true;
                            erroredescr = "4.Errore in query " + sql;
                            System.err.println(erroredescr);
                            break;
                        }
                        db1.closeDB();
                    } else {
                        errore = true;
                        erroredescr = "3.Errore in query " + sql;
                        System.err.println(erroredescr);
                        break;
                    }
                    db.closeDB();

                }

                if (//FULL
                        tablename.equals("nc_causali")
                        || tablename.equals("nc_causali_pay")
                        || tablename.equals("nc_tipologia")
                        || tablename.equals("rate_range")
                        || tablename.equals("supporti")
                        || tablename.equals("supporti_valuta")
                        || tablename.equals("till")
                        || tablename.equals("valute")
                        || tablename.equals("valute_tagli")) {

                    dbfiliale = new Db(hostfiliale, true);
                    if (dbfiliale.getC() != null) {
                        dbfiliale.setDim();

                        cnttableupdate++;

                        sql = "show columns from " + tablename;
                        System.out.println(sql);

                        if (database.equalsIgnoreCase("PRODUZIONE")) {
                            //db1 = new Db(hostPROD, false);
                            db = new Db(hostPROD, false);
                        } else {
                            db = new Db(hostTEST, false);
                        }
                        rs1 = db.getData(sql);
                        if (rs1 != null) {
                            while (rs1.next()) {
                                elencocolonne.add(rs1.getString(1));
                            }

                            sql = "SELECT ";
                            for (int g = 0; g < elencocolonne.size(); g++) {
                                if (g == elencocolonne.size() - 1) {
                                    sql += elencocolonne.get(g) + " ";
                                } else {
                                    sql += elencocolonne.get(g) + " , ";
                                }
                            }
                            sql += " FROM " + tablename + " WHERE filiale = '" + filiale + "' ";
                            Db db1 = null;
                            if (database.equalsIgnoreCase("PRODUZIONE")) {
                                //db1 = new Db(hostPROD, false);
                                db1 = new Db(hostPROD, false);
                            } else {
                                db1 = new Db(hostTEST, false);
                            }
                            rs1 = db1.getData(sql);
                            if (rs1 != null) {
                                sql1 = "INSERT INTO " + tablename + " (";
                                for (int v = 0; v < elencocolonne.size(); v++) {
                                    if (v == elencocolonne.size() - 1) {
                                        sql1 += elencocolonne.get(v) + ") VALUES (";
                                    } else {
                                        sql1 += elencocolonne.get(v) + ",";
                                    }
                                }
                                for (int v = 0; v < elencocolonne.size(); v++) {
                                    if (v == elencocolonne.size() - 1) {
                                        sql1 += "?)";
                                    } else {
                                        sql1 += "?,";
                                    }
                                }
                                System.out.println("doing insert...");
                                String[] ris = new String[3];
                                ris[0] = "true";
                                ris[1] = "";
                                ris[2] = "";
                                while (rs1.next() && ris[0].equals("true")) {
                                    ris = dbfiliale.addInfo(rs1, sql1, elencocolonne.size());
//                        System.out.println("doing.....");
                                }
                                if (!ris[0].equals("true")) {
                                    errore = true;
                                    erroredescr = "5.Errore in query " + sql1;
                                    System.out.println(erroredescr + "\n");
                                    System.out.println(ris[1] + "\n");
                                    System.out.println(ris[2] + "\n");
                                    break;
                                }

                                System.out.println("END table " + tablename);
                            } else {
                                errore = true;
                                erroredescr = "4.Errore in query " + sql;
                                System.out.println(erroredescr + "\n");
                                break;
                            }
                            db1.closeDB();

                        } else {
                            errore = true;
                            erroredescr = "3.Errore in query " + sql;
                            System.out.println(erroredescr + "\n");
                            break;
                        }
                        db.closeDB();
                        dbfiliale.closeDB();
                    } else {
                        erroredescr = "2.Errore Connessione a DB filiale " + filiale;
                        errore = true;
                        System.out.println(erroredescr + "\n");
                        break;
                    }

                }

                if ( //ultimo anno
                        tablename.equals("forex_prenot")
                        || tablename.equals("inv_incremental")
                        || tablename.equals("inv_list")
                        || tablename.equals("nc_transaction")
                        || tablename.equals("rate_history")
                        || tablename.equals("rate_history_mod")
                        || tablename.equals("stock")
                        || tablename.equals("stock_report")) //|| tablename.equals("stock_story")) 
                {

                    dbfiliale = new Db(hostfiliale, true);
                    if (dbfiliale.getC() != null) {
                        dbfiliale.setDim();

                        cnttableupdate++;

                        sql = "show columns from " + tablename;
                        System.out.println(sql);

                        if (database.equalsIgnoreCase("PRODUZIONE")) {
                            //db1 = new Db(hostPROD, false);
                            db = new Db(hostPROD, false);
                        } else {
                            db = new Db(hostTEST, false);
                        }
                        rs1 = db.getData(sql);
                        if (rs1 != null) {
                            while (rs1.next()) {
                                elencocolonne.add(rs1.getString(1));
                            }

                            sql = "SELECT ";
                            for (int g = 0; g < elencocolonne.size(); g++) {
                                if (g == elencocolonne.size() - 1) {
                                    sql += elencocolonne.get(g) + " ";
                                } else {
                                    sql += elencocolonne.get(g) + " , ";
                                }
                            }
                            sql += " FROM " + tablename + " WHERE filiale = '" + filiale + "'";
                            //dt_upload >= DATE_SUB(NOW(),INTERVAL 1 YEAR);
                            if (tablename.equals("nc_transaction") || tablename.equals("stock_report")) { //data
                                sql += " AND data >= DATE_SUB(NOW(),INTERVAL 1 YEAR);";
                            }
                            if (tablename.equals("forex_prenot")) {
                                sql += " AND timestamp >= DATE_SUB(NOW(),INTERVAL 1 YEAR);";
                            }
                            if (tablename.equals("inv_incremental") || tablename.equals("inv_list")
                                    || tablename.equals("rate_history_mod")) {
                                sql += " AND dt >= DATE_SUB(NOW(),INTERVAL 1 YEAR);";
                            }
                            if (tablename.equals("rate_history")) {
                                sql += " AND dt_mod >= DATE_SUB(NOW(),INTERVAL 1 YEAR);";
                            }
                            //if (tablename.equals("stock") || tablename.equals("stock_story")) {
                            if (tablename.equals("stock")) {
                                sql += " AND date >= DATE_SUB(NOW(),INTERVAL 1 YEAR);";
                            }
                            Db db1 = null;
                            if (database.equalsIgnoreCase("PRODUZIONE")) {
                                //db1 = new Db(hostPROD, false);
                                db1 = new Db(hostPROD, false);
                            } else {
                                db1 = new Db(hostTEST, false);
                            }
                            rs1 = db1.getData(sql);
                            if (rs1 != null) {
                                sql1 = "INSERT INTO " + tablename + " (";
                                for (int v = 0; v < elencocolonne.size(); v++) {
                                    if (v == elencocolonne.size() - 1) {
                                        sql1 += elencocolonne.get(v) + ") VALUES (";
                                    } else {
                                        sql1 += elencocolonne.get(v) + ",";
                                    }
                                }
                                for (int v = 0; v < elencocolonne.size(); v++) {
                                    if (v == elencocolonne.size() - 1) {
                                        sql1 += "?)";
                                    } else {
                                        sql1 += "?,";
                                    }
                                }
                                System.out.println("doing insert...");
                                String[] ris = new String[3];
                                ris[0] = "true";
                                ris[1] = "";
                                ris[2] = "";
                                while (rs1.next() && ris[0].equals("true")) {
                                    ris = dbfiliale.addInfo(rs1, sql1, elencocolonne.size());
                                }
                                if (!ris[0].equals("true")) {
                                    errore = true;
                                    erroredescr = "5.Errore in query " + sql1;
                                    System.out.println(erroredescr + "\n");
                                    System.out.println(ris[1] + "\n");
                                    System.out.println(ris[2] + "\n");
                                    break;
                                }

                                System.out.println("END table " + tablename);
                            } else {
                                errore = true;
                                erroredescr = "4.Errore in query " + sql;
                                System.out.println(erroredescr + "\n");
                                break;
                            }
                            db1.closeDB();
                        } else {
                            errore = true;
                            erroredescr = "3.Errore in query " + sql;
                            System.out.println(erroredescr + "\n");
                            break;
                        }
                        db.closeDB();
                        dbfiliale.closeDB();
                    } else {
                        erroredescr = "2.Errore Connessione a DB filiale " + filiale;
                        errore = true;
                        System.out.println(erroredescr + "\n");
                        break;
                    }
                }

            }//for elencotabelle
            System.out.println("NUMERO DI TABELLE AGGIORNATE: " + cnttableupdate);
            if (errore) {
//                dbfiliale = new Db(hostfiliale, true);
//                if (!erroredescr.startsWith("1.")) { //se almeno mi sono collegato al DB centrale e se sto installando la prima volta
//                    eseguiresettabelleTRE(dbfiliale, elencotabelle);
//                }
//                dbfiliale.closeDB();
                System.err.println(erroredescr);
                System.err.println("Si sono verificati errori durante l'operazione di inizializzazione dei dati sul DB.");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        System.out.println("-----------------   END   ------------------------------");
        return errore;
    }

//    public boolean eseguiresettabelleUNO(Db dbfiliale, ArrayList<String> elencotabelle) {
//        boolean esitotruncate = true;
//        for (int g = 0; g < elencotabelle.size(); g++) {
//            String tablename = elencotabelle.get(g);
//            if (tablename.equals("agenzie")
//                    || tablename.equals("bank")
//                    || tablename.equals("branchbudget")
//                    || tablename.equals("branchgroup")
//                    || tablename.equals("anagrafica_ru")
//                    || tablename.equals("anagrafica_ru_attach")
//                    || tablename.equals("province")
//                    || tablename.equals("bce_year")
//                    || tablename.equals("blacklist")
//                    || tablename.equals("branch")
//                    || tablename.equals("carte_credito")
//                    || tablename.equals("cash_perm")
//                    || tablename.equals("codici_fiscali_esteri")
//                    || tablename.equals("codici_fiscali_italia")
//                    || tablename.equals("codici_fiscali_mese")
//                    || tablename.equals("commissione_fissa")
//                    || tablename.equals("compro")
//                    || tablename.equals("comuni_apm")
//                    || tablename.equals("conf")
//                    || tablename.equals("configmonitor")
//                    || tablename.equals("contabilita")
//                    || tablename.equals("internetbooking")
//                    || tablename.equals("kind_commissione_fissa")
//                    || tablename.equals("logical")
//                    || tablename.equals("nazioni")
//                    || tablename.equals("nc_kind")
//                    || tablename.equals("office")
//                    || tablename.equals("pages")
//                    || tablename.equals("path")
//                    || tablename.equals("paymat")
//                    || tablename.equals("select_g01")
//                    || tablename.equals("select_g02")
//                    || tablename.equals("select_g03")
//                    || tablename.equals("select_rv")
//                    || tablename.equals("selectareanaz")
//                    || tablename.equals("selectdoctrans")
//                    || tablename.equals("selectgroupbranch")
//                    || tablename.equals("selectgrouptype")
//                    || tablename.equals("selectinout")
//                    || tablename.equals("selectkind")
//                    || tablename.equals("selectlevelrate")
//                    || tablename.equals("selectncde")
//                    || tablename.equals("selectresident")
//                    || tablename.equals("selecttipocliente")
//                    || tablename.equals("selecttipov")
//                    || tablename.equals("temppaymat")
//                    || tablename.equals("tipologiaclienti")
//                    || tablename.equals("tipologiadocumento")
//                    || tablename.equals("under_min_comm_justify")
//                    || tablename.equals("user_sito")
//                    || tablename.equals("users")
//                    || tablename.equals("vatcode")) {
//                System.out.println("Eseguo TRUNCATE per la tabella " + tablename);
//                if (!dbfiliale.eseuitruncate(tablename)) {
//                    esitotruncate = false;
//                }
//            }
//        }
//        return esitotruncate;
//    }
//
//    public boolean eseguiresettabelleDUE(Db dbfiliale, ArrayList<String> elencotabelle) {
//        boolean esitotruncate = true;
//        for (int g = 0; g < elencotabelle.size(); g++) {
//            String tablename = elencotabelle.get(g);
//            if (tablename.equals("codici_sblocco") || tablename.equals("codici_sblocco_file") || tablename.equals("transaction_reprint")
//                    || tablename.equals("newsletter_status") || tablename.equals("newsletter") || tablename.equals("local")) {
//                System.out.println("Eseguo TRUNCATE per la tabella " + tablename);
//                if (!dbfiliale.eseuitruncate(tablename)) {
//                    esitotruncate = false;
//                }
//            }
//        }
//        return esitotruncate;
//    }
//
//    public boolean eseguiresettabelleTRE(Db dbfiliale, ArrayList<String> elencotabelle) {
//
//        boolean esitotruncate = true;
//        for (int g = 0; g < elencotabelle.size(); g++) {
//            String tablename = elencotabelle.get(g);
//            if (tablename.equals("ch_transaction") || tablename.equals("et_change") || tablename.equals("it_change")
//                    || tablename.equals("oc_lista") || tablename.equals("office_sp") || tablename.equals("ch_transaction_temp")
//                    || tablename.equals("ch_transaction_doc")
//                    || tablename.equals("ch_transaction_refund") || tablename.equals("ch_transaction_file")
//                    || tablename.equals("ch_transaction_valori")
//                    || tablename.equals("et_change_tg")
//                    || tablename.equals("et_change_valori") || tablename.equals("et_frombranch")
//                    || tablename.equals("et_nochange_valori")
//                    || tablename.equals("it_change_tg") || tablename.equals("it_change_valori")
//                    || tablename.equals("it_nochange_valori") || tablename.equals("oc_change") || tablename.equals("oc_change_tg")
//                    || tablename.equals("oc_errors")
//                    || tablename.equals("oc_nochange") || tablename.equals("oc_pos") || tablename.equals("real_oc_change")
//                    || tablename.equals("real_oc_change_tg") || tablename.equals("real_oc_nochange") || tablename.equals("real_oc_pos")
//                    || tablename.equals("office_sp_valori") || tablename.equals("nc_causali") || tablename.equals("nc_causali_pay")
//                    || tablename.equals("nc_tipologia") || tablename.equals("rate_range")
//                    || tablename.equals("supporti") || tablename.equals("supporti_valuta")
//                    || tablename.equals("till")
//                    || tablename.equals("valute") || tablename.equals("valute_tagli") || tablename.equals("forex_prenot")
//                    || tablename.equals("inv_incremental") || tablename.equals("inv_list") || tablename.equals("nc_transaction")
//                    || tablename.equals("rate_history") || tablename.equals("rate_history_mod") || tablename.equals("stock")
//                    || tablename.equals("stock_report") || tablename.equals("stock_story")
//                    || tablename.equals("stock_quantity")
//                    || tablename.equals("ch_transaction_doc_story") || tablename.equals("ch_transaction_file_story")
//                    || tablename.equals("ch_transaction_refund_story") || tablename.equals("ch_transaction_story")
//                    || tablename.equals("ch_transaction_valori_story")) {
//                System.out.println("Eseguo TRUNCATE per la tabella " + tablename);
//                if (!dbfiliale.eseuitruncate(tablename)) {
//                    esitotruncate = false;
//                }
//            }
//        }
//        return esitotruncate;
//    }

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:

        String fil = this.branchcod.getText().trim();
        String database = this.type.getSelectedItem().toString();

        Db db1 = null;
        if (database.equalsIgnoreCase("PRODUZIONE")) {
            db1 = new Db(hostPROD, false);
        } else {
            db1 = new Db(hostTEST, false);
        }

        if (db1.getC() != null) {
            ArrayList<String> out = db1.list_cod_branch_enabled();
            if (out.contains(fil)) {

                ArrayList<String[]> ipfil = db1.getIpFiliale();

                String hsfil = Utility.formatAL(fil, ipfil, 1);
                boolean es = faseUNO(database, hsfil, fil);
                if (es) {//ERRORE
                    JOptionPane.showMessageDialog(this, "Si è verificato un errore, riprovare la Fase UNO.", "Errore", JOptionPane.ERROR_MESSAGE);
                } else {
                    this.f1ok.setVisible(true);
                    this.f1ko.setVisible(false);
                    JOptionPane.showMessageDialog(this, "Fase UNO completata", "OK", JOptionPane.INFORMATION_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Inserire un codice filiale corretto", "Codice filiale non corretto", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Connessione al DB centrale non disponibile", "Connessione errata", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:

        String fil = this.branchcod.getText().trim();
        String database = this.type.getSelectedItem().toString();

        Db db1 = null;
        if (database.equalsIgnoreCase("PRODUZIONE")) {
            //db1 = new Db(hostPROD, false);
            db1 = new Db(hostPROD, false);
        } else {
            db1 = new Db(hostTEST, false);
        }

        if (db1.getC() != null) {
            ArrayList<String> out = db1.list_cod_branch_enabled();
            if (out.contains(fil)) {

                ArrayList<String[]> ipfil = db1.getIpFiliale();

                String hsfil = Utility.formatAL(fil, ipfil, 1);
                boolean es = faseDUE(database, hsfil, fil);
                if (es) {//ERRORE
                    JOptionPane.showMessageDialog(this, "Si è verificato un errore, riprovare la Fase DUE.", "Errore", JOptionPane.ERROR_MESSAGE);
                } else {
                    this.f2ok.setVisible(true);
                    this.f2ko.setVisible(false);
                    JOptionPane.showMessageDialog(this, "Fase DUE completata", "OK", JOptionPane.INFORMATION_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Inserire un codice filiale corretto", "Codice filiale non corretto", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Connessione al DB centrale non disponibile", "Connessione errata", JOptionPane.ERROR_MESSAGE);
        }


    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        String fil = this.branchcod.getText().trim();
        String database = this.type.getSelectedItem().toString();
        Db db1 = null;
        if (database.equalsIgnoreCase("PRODUZIONE")) {
            //db1 = new Db(hostPROD, false);
            db1 = new Db(hostPROD, false);
        } else {
            db1 = new Db(hostTEST, false);
        }

        if (db1.getC() != null) {
            ArrayList<String> out = db1.list_cod_branch_enabled();
            if (out.contains(fil)) {

                ArrayList<String[]> ipfil = db1.getIpFiliale();

                String hsfil = Utility.formatAL(fil, ipfil, 1);
                boolean es = faseTRE(database, hsfil, fil);
                if (es) {//ERRORE
                    JOptionPane.showMessageDialog(this, "Si è verificato un errore, riprovare la Fase TRE.", "Errore", JOptionPane.ERROR_MESSAGE);
                } else {
                    this.f3ok.setVisible(true);
                    this.f3ko.setVisible(false);
                    JOptionPane.showMessageDialog(this, "Fase TRE completata", "OK", JOptionPane.INFORMATION_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Inserire un codice filiale corretto", "Codice filiale non corretto", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Connessione al DB centrale non disponibile", "Connessione errata", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            ex.printStackTrace();
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Install().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField branchcod;
    private javax.swing.JLabel f1ko;
    private javax.swing.JLabel f1ok;
    private javax.swing.JLabel f2ko;
    private javax.swing.JLabel f2ok;
    private javax.swing.JLabel f3ko;
    private javax.swing.JLabel f3ok;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JComboBox<String> type;
    // End of variables declaration//GEN-END:variables
}
