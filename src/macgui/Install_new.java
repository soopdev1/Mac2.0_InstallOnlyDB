/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package macgui;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.atomic.AtomicInteger;
import javax.swing.JOptionPane;
import javax.swing.UnsupportedLookAndFeelException;
import static macgui.Utility.hostPROD;
import static macgui.Utility.hostTEST;
import org.apache.commons.lang3.StringUtils;

/**
 *
 * @author rcosco
 */
public class Install_new extends javax.swing.JFrame {

    /**
     * Creates new form Install
     */
    public Install_new() {
        initComponents();
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation(dim.width / 2 - this.getSize().width / 2, dim.height / 2 - this.getSize().height / 2);
        this.f1ok.setVisible(false);
        this.f2ok.setVisible(false);
        this.f3ok.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        branchcod = new javax.swing.JTextField();
        type = new javax.swing.JComboBox<>();
        jSeparator1 = new javax.swing.JSeparator();
        faseunojButton = new javax.swing.JButton();
        faseduejButton = new javax.swing.JButton();
        fasetrejButton = new javax.swing.JButton();
        f1ok = new javax.swing.JLabel();
        f1ko = new javax.swing.JLabel();
        f2ok = new javax.swing.JLabel();
        f2ko = new javax.swing.JLabel();
        f3ok = new javax.swing.JLabel();
        f3ko = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Frontend Maccorp");

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("Mac 2.0 - Install Database v1.6");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("BRANCH ID:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("DATABASE:");

        type.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "PRODUZIONE", "TEST" }));

        faseunojButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        faseunojButton.setText("FASE UNO");
        faseunojButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                faseunojButtonActionPerformed(evt);
            }
        });

        faseduejButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        faseduejButton.setText("FASE DUE");
        faseduejButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                faseduejButtonActionPerformed(evt);
            }
        });

        fasetrejButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        fasetrejButton.setText("FASE TRE");
        fasetrejButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fasetrejButtonActionPerformed(evt);
            }
        });

        f1ok.setIcon(new javax.swing.ImageIcon(getClass().getResource("/macgui/ok-icon.png"))); // NOI18N

        f1ko.setIcon(new javax.swing.ImageIcon(getClass().getResource("/macgui/Actions-window-close-icon.png"))); // NOI18N

        f2ok.setIcon(new javax.swing.ImageIcon(getClass().getResource("/macgui/ok-icon.png"))); // NOI18N

        f2ko.setIcon(new javax.swing.ImageIcon(getClass().getResource("/macgui/Actions-window-close-icon.png"))); // NOI18N

        f3ok.setIcon(new javax.swing.ImageIcon(getClass().getResource("/macgui/ok-icon.png"))); // NOI18N

        f3ko.setIcon(new javax.swing.ImageIcon(getClass().getResource("/macgui/Actions-window-close-icon.png"))); // NOI18N

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/macgui/logocl.png"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(46, 46, 46)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel2)
                                            .addComponent(jLabel3))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(branchcod)
                                            .addComponent(type, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                    .addComponent(jLabel1)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(38, 38, 38)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(fasetrejButton, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                                        .addComponent(f3ok)
                                        .addGap(26, 26, 26)
                                        .addComponent(f3ko))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(faseunojButton, javax.swing.GroupLayout.DEFAULT_SIZE, 142, Short.MAX_VALUE)
                                            .addComponent(faseduejButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGap(31, 31, 31)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(f2ok)
                                                .addGap(26, 26, 26)
                                                .addComponent(f2ko))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(f1ok)
                                                .addGap(26, 26, 26)
                                                .addComponent(f1ko)))))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addGap(44, 44, 44))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addComponent(branchcod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3)
                    .addComponent(type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(faseunojButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(f1ok)
                    .addComponent(f1ko))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(faseduejButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(f2ok)
                    .addComponent(f2ko))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fasetrejButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(f3ok)
                    .addComponent(f3ko))
                .addGap(18, 18, 18)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public boolean fase_UNO(String database, String hostfiliale, String filiale) {

        List<List<String>> liste = Utility.getListTableAndQuery(filiale, "1");

        List<String> elencotabelle = liste.get(0);
        List<String> elencoquery = liste.get(1);

        AtomicInteger errore = new AtomicInteger(0);
        AtomicInteger ctntabupdate = new AtomicInteger(0);
        AtomicInteger index = new AtomicInteger(0);

        StringBuilder erroredescr = new StringBuilder("");

        Db db;
        if (database.equalsIgnoreCase("PRODUZIONE")) {
            //db1 = new Db(hostPROD, false);
            db = new Db(hostPROD, false);
        } else {
            db = new Db(hostTEST, false);
        }

        elencotabelle.forEach(table -> {
            System.out.println("TABELLA: " + table + " - QUERY : " + elencoquery.get(index.get()));
            try {

                ResultSet rs = db.getC().createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE).executeQuery(elencoquery.get(index.get()));
                if (rs != null) {
                    List<String[]> columnNames = new ArrayList<>();
                    ResultSetMetaData columns = rs.getMetaData();
                    rs.afterLast(); //Moves the curser to the end of the ResultSet object
                    String insert = "INSERT INTO " + table + " VALUES (";
                    int i = 0;
                    while (i < columns.getColumnCount()) {
                        i++;
                        String val[] = {String.valueOf(i), columns.getColumnName(i)};
                        columnNames.add(val);
                        insert += "?,";
                    }
                    insert = StringUtils.substring(insert, 0, insert.length() - 1);
                    insert += ")";
                    Db dbfiliale = new Db(hostfiliale, true);
                    if (dbfiliale.getC() != null) {
                        dbfiliale.setDim();
                        while (rs.previous()) {
                            PreparedStatement psins = dbfiliale.getC().prepareStatement(insert,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);
                            columnNames.forEach(cn -> {
                                try {
                                    psins.setString(Integer.parseInt(cn[0]), rs.getString(cn[1]));
                                } catch (SQLException e) {
                                }
                            });
                            String[] out = new String[3];
                            out[0] = "false";
                            out[1] = psins.toString();
                            out[2] = "";
                            try {
                                boolean es = psins.executeUpdate() > 0;
                                if (es) {
                                    out[0] = "true";
                                }
                            } catch (SQLException e) {
                                if (e.getMessage().toLowerCase().contains("duplicate")) {
                                    out[0] = "true";
                                    out[2] = "";
                                } else {
                                    out[2] = e.getMessage();
                                    out[0] = "false";
                                }
                            }
                            if (out[0].equals("false")) {
                                errore.addAndGet(1);
                                erroredescr.append("3. QUERY ERROR: ").append(out[1]).append(" - ERROR - ").append(out[2]);
                            }
                        }
                        ctntabupdate.addAndGet(1);
                        dbfiliale.closeDB();
                    } else {
                        errore.addAndGet(1);
                        erroredescr.append("2. DB FILIALE NON RAGGIUNGIBILE.");
                    }
                } else {
                    errore.addAndGet(1);
                    erroredescr.append("1. NO RESULTSET.");
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
            index.addAndGet(1);
        });
        db.closeDB();

        //ALTRI UPDATE "AD HOC"
        Db dbfiliale = new Db(hostfiliale, true);
        if (dbfiliale.getC() != null) {
            try {
                dbfiliale.getC().createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE).executeUpdate("UPDATE path SET descr = 'C:\\\\Maccorp\\\\temp\\\\' where cod = 'temp'");
                dbfiliale.getC().createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE).execute("INSERT INTO local (cod) VALUES ('" + filiale + "')");
            } catch (SQLException e) {
//                errore.addAndGet(1);
//                erroredescr.append("3. QUERY ERROR: path - ERROR - ").append(e.getMessage());
            }
            dbfiliale.closeDB();
        }

        System.out.println("NUMERO DI TABELLE AGGIORNATE: " + ctntabupdate.get());
        if (errore.get() > 0) {
            System.out.println(erroredescr.toString());
            System.out.println("Si sono verificati errori durante l'operazione di inizializzazione dei dati sul DB.");
        }
        System.out.println("-----------------   END   ------------------------------");
        return errore.get() > 0;

    }

    public boolean fase_DUE(String database, String hostfiliale, String filiale) {

        List<List<String>> liste = Utility.getListTableAndQuery(filiale, "2");
        List<String> elencotabelle = liste.get(0);
        List<String> elencoquery = liste.get(1);
        AtomicInteger errore = new AtomicInteger(0);
        AtomicInteger ctntabupdate = new AtomicInteger(0);
        AtomicInteger index = new AtomicInteger(0);

        StringBuilder erroredescr = new StringBuilder("");

        elencotabelle.forEach(table -> {
            System.out.println("TABELLA: " + table + " - QUERY : " + elencoquery.get(index.get()));
            try {
                Db db;
                if (database.equalsIgnoreCase("PRODUZIONE")) {
                    //db1 = new Db(hostPROD, false);
                    db = new Db(hostPROD, false);
                } else {
                    db = new Db(hostTEST, false);
                }
                if (db.getC() == null) {
                    if (database.equalsIgnoreCase("PRODUZIONE")) {
                        //db1 = new Db(hostPROD, false);
                        db = new Db(hostPROD, false);
                    } else {
                        db = new Db(hostTEST, false);
                    }
                }

                ResultSet rs = db.getC().createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE).executeQuery(elencoquery.get(index.get()));
                if (rs != null) {
                    List<String[]> columnNames = new ArrayList<>();
                    ResultSetMetaData columns = rs.getMetaData();
                    rs.afterLast(); //Moves the curser to the end of the ResultSet object
                    StringBuilder sb1 = new StringBuilder();
                    String insert = "INSERT INTO " + table + " VALUES (";
                    int i = 0;
                    while (i < columns.getColumnCount()) {
                        i++;
                        String val[] = {String.valueOf(i), columns.getColumnName(i)};
                        columnNames.add(val);
                        insert += "?,";
                    }
                    insert = StringUtils.substring(insert, 0, insert.length() - 1);
                    insert += ")";
                    Db dbfiliale = new Db(hostfiliale, true);
                    if (dbfiliale.getC() != null) {
                        dbfiliale.setDim();
                        while (rs.previous()) {
                            PreparedStatement psins = dbfiliale.getC().prepareStatement(insert,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);
                            columnNames.forEach(cn -> {
                                try {
                                    psins.setString(Integer.parseInt(cn[0]), rs.getString(cn[1]));
                                } catch (SQLException e) {
                                }
                            });
                            String[] out = new String[3];
                            out[0] = "false";
                            out[1] = psins.toString();
                            out[2] = "";
                            try {
                                boolean es = psins.executeUpdate() > 0;
                                if (es) {
                                    out[0] = "true";
                                }
                            } catch (SQLException e) {
                                if (e.getMessage().toLowerCase().contains("duplicate")) {
                                    out[0] = "true";
                                    out[2] = "";
                                } else {
                                    out[2] = e.getMessage();
                                    out[0] = "false";
                                }
                            }
                            if (out[0].equals("false")) {
                                errore.addAndGet(1);
                                erroredescr.append("3. QUERY ERROR: ").append(out[1]).append(" - ERROR - ").append(out[2]);
                            }
                        }
                        ctntabupdate.addAndGet(1);
                        dbfiliale.closeDB();
                    } else {
                        errore.addAndGet(1);
                        erroredescr.append("2. DB FILIALE NON RAGGIUNGIBILE.");
                    }
                } else {
                    errore.addAndGet(1);
                    erroredescr.append("1. NO RESULTSET.");
                }
                db.closeDB();
            } catch (SQLException e) {
                e.printStackTrace();
            }
            index.addAndGet(1);
        });
        System.out.println("NUMERO DI TABELLE AGGIORNATE: " + ctntabupdate.get());
        if (errore.get() > 0) {
            System.out.println(erroredescr.toString());
            System.out.println("Si sono verificati errori durante l'operazione di inizializzazione dei dati sul DB.");
        }
        System.out.println("-----------------   END   ------------------------------");
        return errore.get() > 0;
    }

    public boolean fase_TRE(String database, String hostfiliale, String filiale) {
        List<List<String>> liste = Utility.getListTableAndQuery(filiale, "3");

        List<String> elencotabelle = liste.get(0);
        List<String> elencoquery = liste.get(1);

        AtomicInteger errore = new AtomicInteger(0);
        AtomicInteger ctntabupdate = new AtomicInteger(0);
        AtomicInteger index = new AtomicInteger(0);

        StringBuilder erroredescr = new StringBuilder("");

        elencotabelle.forEach(table -> {

            System.out.println("TABELLA: " + table + " - QUERY : " + elencoquery.get(index.get()));
            try {
                Db db;
                if (database.equalsIgnoreCase("PRODUZIONE")) {
                    //db1 = new Db(hostPROD, false);
                    db = new Db(hostPROD, false);
                } else {
                    db = new Db(hostTEST, false);
                }

                ResultSet rs = db.getC().createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE).executeQuery(elencoquery.get(index.get()));
                if (rs != null) {
                    List<String[]> columnNames = new ArrayList<>();
                    ResultSetMetaData columns = rs.getMetaData();
                    rs.afterLast(); //Moves the curser to the end of the ResultSet object
                    StringBuilder sb1 = new StringBuilder();
                    String insert = "INSERT INTO " + table + " VALUES (";
                    int i = 0;
                    while (i < columns.getColumnCount()) {
                        i++;
                        String val[] = {String.valueOf(i), columns.getColumnName(i)};
                        columnNames.add(val);
                        insert += "?,";
                    }
                    insert = StringUtils.substring(insert, 0, insert.length() - 1);
                    insert += ")";

                    Db dbfiliale = new Db(hostfiliale, true);
                    if (dbfiliale.getC() != null) {
                        dbfiliale.setDim();
                        while (rs.previous()) {
                            PreparedStatement psins = dbfiliale.getC().prepareStatement(insert,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);
                            columnNames.forEach(cn -> {
                                try {
                                    psins.setString(Integer.parseInt(cn[0]), rs.getString(cn[1]));
                                } catch (SQLException e) {
                                }
                            });
                            String[] out = new String[3];
                            out[0] = "false";
                            out[1] = psins.toString();
                            out[2] = "";
                            try {
                                boolean es = psins.executeUpdate() > 0;
                                if (es) {
                                    out[0] = "true";
                                }
                            } catch (SQLException e) {
                                if (e.getMessage().toLowerCase().contains("duplicate")) {
                                    out[0] = "true";
                                    out[2] = "";
                                } else {
                                    out[2] = e.getMessage();
                                    out[0] = "false";
                                }
                            }
                            if (out[0].equals("false")) {
                                errore.addAndGet(1);
                                erroredescr.append("3. QUERY ERROR: ").append(out[1]).append(" - ERROR - ").append(out[2]);
                            }
                        }
                        ctntabupdate.addAndGet(1);
                        dbfiliale.closeDB();
                    } else {
                        errore.addAndGet(1);
                        erroredescr.append("2. DB FILIALE NON RAGGIUNGIBILE.");
                    }
                } else {
                    errore.addAndGet(1);
                    erroredescr.append("1. NO RESULTSET.");
                }
                db.closeDB();
            } catch (SQLException e) {
                e.printStackTrace();
            }
            index.addAndGet(1);

        });

        System.out.println("NUMERO DI TABELLE AGGIORNATE: " + ctntabupdate.get());
        if (errore.get() > 0) {
            System.out.println(erroredescr.toString());
            System.out.println("Si sono verificati errori durante l'operazione di inizializzazione dei dati sul DB.");
        }
        System.out.println("-----------------   END   ------------------------------");
        return errore.get() > 0;
    }

    private void faseunojButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_faseunojButtonActionPerformed
        // TODO add your handling code here:
        String fil = this.branchcod.getText().trim();
        String database = this.type.getSelectedItem().toString();

        Db db1;
        if (database.equalsIgnoreCase("PRODUZIONE")) {
            db1 = new Db(hostPROD, false);
        } else {
            db1 = new Db(hostTEST, false);
        }

        if (db1.getC() != null) {
            ArrayList<String> out = db1.list_cod_branch_enabled();
            if (out.contains(fil)) {
                ArrayList<String[]> ipfil = db1.getIpFiliale();
                db1.closeDB();

                String hsfil = Utility.formatAL(fil, ipfil, 1);
                boolean es = fase_UNO(database, hsfil, fil);
                if (es) {//ERRORE
                    JOptionPane.showMessageDialog(this, "Si è verificato un errore, riprovare la Fase UNO.", "Errore", JOptionPane.ERROR_MESSAGE);
                } else {
                    this.f1ok.setVisible(true);
                    this.f1ko.setVisible(false);
                    JOptionPane.showMessageDialog(this, "Fase UNO completata", "OK", JOptionPane.INFORMATION_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Inserire un codice filiale corretto", "Codice filiale non corretto", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Connessione al DB centrale non disponibile", "Connessione errata", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_faseunojButtonActionPerformed

    private void faseduejButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_faseduejButtonActionPerformed
        // TODO add your handling code here:

        String fil = this.branchcod.getText().trim();
        String database = this.type.getSelectedItem().toString();

        Db db1;
        if (database.equalsIgnoreCase("PRODUZIONE")) {
            //db1 = new Db(hostPROD, false);
            db1 = new Db(hostPROD, false);
        } else {
            db1 = new Db(hostTEST, false);
        }

        if (db1.getC() != null) {
            ArrayList<String> out = db1.list_cod_branch_enabled();
            if (out.contains(fil)) {
                ArrayList<String[]> ipfil = db1.getIpFiliale();
                db1.closeDB();

                String hsfil = Utility.formatAL(fil, ipfil, 1);
                boolean es = fase_DUE(database, hsfil, fil);
                if (es) {//ERRORE
                    JOptionPane.showMessageDialog(this, "Si è verificato un errore, riprovare la Fase DUE.", "Errore", JOptionPane.ERROR_MESSAGE);
                } else {
                    this.f2ok.setVisible(true);
                    this.f2ko.setVisible(false);
                    JOptionPane.showMessageDialog(this, "Fase DUE completata", "OK", JOptionPane.INFORMATION_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Inserire un codice filiale corretto", "Codice filiale non corretto", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Connessione al DB centrale non disponibile", "Connessione errata", JOptionPane.ERROR_MESSAGE);
        }


    }//GEN-LAST:event_faseduejButtonActionPerformed

    private void fasetrejButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fasetrejButtonActionPerformed
        // TODO add your handling code here:
        String fil = this.branchcod.getText().trim();
        String database = this.type.getSelectedItem().toString();
        Db db1;
        if (database.equalsIgnoreCase("PRODUZIONE")) {
            //db1 = new Db(hostPROD, false);
            db1 = new Db(hostPROD, false);
        } else {
            db1 = new Db(hostTEST, false);
        }

        if (db1.getC() != null) {
            ArrayList<String> out = db1.list_cod_branch_enabled();
            if (out.contains(fil)) {
                ArrayList<String[]> ipfil = db1.getIpFiliale();
                db1.closeDB();

                String hsfil = Utility.formatAL(fil, ipfil, 1);
                boolean es = fase_TRE(database, hsfil, fil);
                if (es) {//ERRORE
                    JOptionPane.showMessageDialog(this, "Si è verificato un errore, riprovare la Fase TRE.", "Errore", JOptionPane.ERROR_MESSAGE);
                } else {
                    this.f3ok.setVisible(true);
                    this.f3ko.setVisible(false);
                    JOptionPane.showMessageDialog(this, "Fase TRE completata", "OK", JOptionPane.INFORMATION_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Inserire un codice filiale corretto", "Codice filiale non corretto", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Connessione al DB centrale non disponibile", "Connessione errata", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_fasetrejButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Metal".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
        }

        java.awt.EventQueue.invokeLater(() -> {
            new Install_new().setVisible(true);
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField branchcod;
    private javax.swing.JLabel f1ko;
    private javax.swing.JLabel f1ok;
    private javax.swing.JLabel f2ko;
    private javax.swing.JLabel f2ok;
    private javax.swing.JLabel f3ko;
    private javax.swing.JLabel f3ok;
    private javax.swing.JButton faseduejButton;
    private javax.swing.JButton fasetrejButton;
    private javax.swing.JButton faseunojButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JComboBox<String> type;
    // End of variables declaration//GEN-END:variables
}
