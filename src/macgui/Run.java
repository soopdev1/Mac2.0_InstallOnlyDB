/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package macgui;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.sql.ResultSet;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import static macgui.Utility.hostPROD;
import static macgui.Utility.hostTEST;

/**
 *
 * @author rcosco
 */
public class Run extends javax.swing.JFrame {

    /**
     * Creates new form Run
     */
    public Run() {
        initComponents();
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation(dim.width / 2 - this.getSize().width / 2, dim.height / 2 - this.getSize().height / 2);
        this.f1ok.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        branchcod = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        type = new javax.swing.JComboBox<>();
        jSeparator1 = new javax.swing.JSeparator();
        jButton1 = new javax.swing.JButton();
        f1ok = new javax.swing.JLabel();
        f1ko = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Frontend SETA");

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("Mac 2.0 - Install Database v2.0");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("BRANCH ID:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("DATABASE:");

        type.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "PRODUZIONE", "TEST" }));

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton1.setText("SINCRONIZZA DATI RIMANENTI");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        f1ok.setIcon(new javax.swing.ImageIcon(getClass().getResource("/macgui/ok-icon.png"))); // NOI18N

        f1ko.setIcon(new javax.swing.ImageIcon(getClass().getResource("/macgui/Actions-window-close-icon.png"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(109, 109, 109)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(type, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(branchcod, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(146, 146, 146)
                        .addComponent(f1ok)
                        .addGap(26, 26, 26)
                        .addComponent(f1ko)))
                .addContainerGap(68, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(27, 27, 27)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(27, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addComponent(branchcod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3)
                    .addComponent(type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(f1ok)
                    .addComponent(f1ko))
                .addContainerGap(19, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(91, 91, 91)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(139, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public boolean datiRIMANENTI(String database, String hostfiliale, String filiale) {
        Db dbfiliale = null;
        boolean errore = false;
        String erroredescr = "";
        try {
            System.out.println("DATI RIMANENTI");
            Db db = null;
            if (database.equalsIgnoreCase("PRODUZIONE")) {
                //db1 = new Db(hostPROD, false);
                db = new Db(hostPROD, false);
            } else {
                db = new Db(hostTEST, false);
            }
            ArrayList<String> elencotabelle = new ArrayList<>();

//            elencotabelle.add("ch_transaction_file");
//            elencotabelle.add("ch_transaction_client");
//            elencotabelle.add("ch_transaction_doc");
//            elencotabelle.add("anagrafica_client");
//            elencotabelle.add("anagrafica_client_modprof");
//            elencotabelle.add("anagrafica_ru_attach");

            elencotabelle.add("codici_fiscali_italia");
            elencotabelle.add("comuni_apm");
            elencotabelle.add("compro");
            elencotabelle.add("unlockrate_justify");

//        elencotabelle.add("nc_causali");
//        elencotabelle.add("nc_causali_pay");
//        elencotabelle.add("nc_tipologia");
//        tabelle.add("rate_range");
//        tabelle.add("supporti");
//        tabelle.add("supporti_valuta");
//        tabelle.add("till");
//        tabelle.add("valute");
//        elencotabelle.add("valute_tagli");
            int ctntabupdate = 0;
            for (int i = 0; i < elencotabelle.size(); i++) {
                System.out.println("avanzamento.....  " + i);
                errore = false;
                erroredescr = "";
                String sql = "";
                String sql1 = "";
                ResultSet rs1 = null;
                ArrayList<String> elencocolonne = new ArrayList();
                String tablename = elencotabelle.get(i);
                if (tablename.equals("anagrafica_client")
                        || tablename.equals("anagrafica_client_modprof")
                        || tablename.equals("anagrafica_ru_attach")
                        || tablename.equals("codici_fiscali_italia")
                        || tablename.equals("compro")
                        || tablename.equals("ch_transaction_file")
                        || tablename.equals("sito_agevolazioni_varie")
                        || tablename.equals("sito_rate_range")
                        || tablename.equals("sito_servizi_agg")
                        || tablename.equals("sito_spread")
                        || tablename.equals("sito_stato")
                        || tablename.equals("sito_supporti")
                        || tablename.equals("unlockrate_justify")
                        || tablename.equals("comuni_apm")) {

                    dbfiliale = new Db(hostfiliale, true);
                    if (dbfiliale.getC() != null) {
//                        dbfiliale.setDim();
                        ctntabupdate++;
                        sql = "show columns from " + tablename;
                        System.out.println(sql);
                        if (database.equalsIgnoreCase("PRODUZIONE")) {
                            //db1 = new Db(hostPROD, false);
                            db = new Db(hostPROD, false);
                        } else {
                            db = new Db(hostTEST, false);
                        }
                        rs1 = db.getData(sql);
                        if (rs1 != null) {
                            while (rs1.next()) {
                                elencocolonne.add(rs1.getString(1));
                            }
                            sql = "SELECT ";
                            for (int g = 0; g < elencocolonne.size(); g++) {
                                if (g == elencocolonne.size() - 1) {
                                    sql += elencocolonne.get(g) + " ";
                                } else {
                                    sql += elencocolonne.get(g) + " , ";
                                }
                            }
                            sql += " FROM " + tablename;
                            Db db1 = null;
                            if (database.equalsIgnoreCase("PRODUZIONE")) {
                                //db1 = new Db(hostPROD, false);
                                db1 = new Db(hostPROD, false);
                            } else {
                                db1 = new Db(hostTEST, false);
                            }

                            rs1 = db1.getData(sql);
                            if (rs1 != null) {
                                sql1 = "INSERT INTO " + tablename + " (";
                                for (int v = 0; v < elencocolonne.size(); v++) {
                                    if (v == elencocolonne.size() - 1) {
                                        sql1 += elencocolonne.get(v) + ") VALUES (";
                                    } else {
                                        sql1 += elencocolonne.get(v) + ",";
                                    }
                                }
                                for (int v = 0; v < elencocolonne.size(); v++) {
                                    if (v == elencocolonne.size() - 1) {
                                        sql1 += "?)";
                                    } else {
                                        sql1 += "?,";
                                    }
                                }

                                String[] ris = new String[3];
                                ris[0] = "true";
                                ris[1] = "";
                                ris[2] = "";
                                while (rs1.next() && ris[0].equals("true")) {
                                    ris = dbfiliale.addInfo(rs1, sql1, elencocolonne.size());
                                }
                                if (!ris[0].equals("true")) {
                                    errore = true;
                                    erroredescr = "5.Errore in query " + sql1;
                                    System.out.println(erroredescr);
                                    System.out.println(ris[1]);
                                    System.out.println(ris[2]);
                                    break;
                                }

                                if (tablename.equals("path")) {
                                    ris = new String[3];
                                    ris[0] = "true";
                                    ris[1] = "";
                                    ris[2] = "";
                                    sql1 = "UPDATE path SET descr = 'C:\\\\Maccorp\\\\temp\\\\' where cod = 'temp' ";
                                    dbfiliale.addInfo(sql1);
                                    if (!ris[0].equals("true")) {
                                        errore = true;
                                        erroredescr = "7.Errore in query " + sql1;
                                        System.out.println(erroredescr);
                                        System.out.println(ris[1]);
                                        System.out.println(ris[2]);
                                        break;
                                    }

                                }

                                dbfiliale.closeDB();
                                System.out.println("END table " + tablename + "\n");
                            } else {
                                errore = true;
                                erroredescr = "4.Errore in query " + sql;
                                System.out.println(erroredescr);
                                break;
                            }
                            db1.closeDB();

                        } else {
                            errore = true;
                            erroredescr = "3.Errore in query " + sql;
                            System.out.println(erroredescr);
                            break;
                        }
                        db.closeDB();

                    }//if dbfiliale !=null
                    else {
                        erroredescr = "2.Errore Connessione a DB filiale " + filiale;
                        errore = true;
                        System.out.println(erroredescr + "\n");
                        break;
                    }
                } else {
                    //qui vanno le altre tabelle distinte per filiale

                    if (tablename.equals("ch_transaction_doc")
                            || tablename.equals("ch_transaction_client")
                            || tablename.equals("nc_causali")
                            || tablename.equals("nc_causali_pay")
                            || tablename.equals("oc_lista")
                            || tablename.equals("nc_tipologia")
                            || tablename.equals("valute_tagli")) {
                        if (database.equalsIgnoreCase("PRODUZIONE")) {
                            //db1 = new Db(hostPROD, false);
                            db = new Db(hostPROD, false);
                        } else {
                            db = new Db(hostTEST, false);
                        }
                        ctntabupdate++;
                        sql = "show columns from " + tablename;
                        System.out.println(sql);
                        rs1 = db.getData(sql);
                        if (rs1 != null) {
                            while (rs1.next()) {
                                elencocolonne.add(rs1.getString(1));
                            }
                            sql = "SELECT ";
                            for (int g = 0; g < elencocolonne.size(); g++) {
                                if (g == elencocolonne.size() - 1) {
                                    sql += elencocolonne.get(g) + " ";
                                } else {
                                    sql += elencocolonne.get(g) + " , ";
                                }
                            }
                            sql += " FROM " + tablename;
                            sql += " WHERE filiale = '" + filiale + "';";
                            //sql += " WHERE codtr IN (SELECT cod FROM ch_transaction WHERE filiale = '" + filiale + "'); ";
                            System.out.println(sql);

                            Db db1 = null;
                            if (database.equalsIgnoreCase("PRODUZIONE")) {
                                //db1 = new Db(hostPROD, false);
                                db1 = new Db(hostPROD, false);
                            } else {
                                db1 = new Db(hostTEST, false);
                            }
                            rs1 = db1.getData(sql);
                            if (rs1 != null) {
                                sql1 = "INSERT INTO " + tablename + " (";
                                for (int v = 0; v < elencocolonne.size(); v++) {
                                    if (v == elencocolonne.size() - 1) {
                                        sql1 += elencocolonne.get(v) + ") VALUES (";
                                    } else {
                                        sql1 += elencocolonne.get(v) + ",";
                                    }
                                }
                                for (int v = 0; v < elencocolonne.size(); v++) {
                                    if (v == elencocolonne.size() - 1) {
                                        sql1 += "?)";
                                    } else {
                                        sql1 += "?,";
                                    }
                                }
                                System.out.println("doing insert...");
                                String[] ris = new String[3];
                                ris[0] = "true";
                                ris[1] = "";
                                ris[2] = "";

                                dbfiliale = new Db(hostfiliale, true);
                                if (dbfiliale.getC() != null) {
                                    dbfiliale.setDim();
                                    while (rs1.next() && ris[0].equals("true")) {
                                        ris = dbfiliale.addInfo(rs1, sql1, elencocolonne.size());
                                    }
                                    if (!ris[0].equals("true")) {
                                        errore = true;
                                        erroredescr = "5.Errore in query " + sql1;
                                        System.out.println(erroredescr + "\n");
                                        System.out.println(ris[1] + "\n");
                                        System.out.println(ris[2] + "\n");
                                        break;
                                    }
                                    dbfiliale.closeDB();
                                }
                                System.out.println("END table " + tablename);
                            } else {
                                errore = true;
                                erroredescr = "4.Errore in query " + sql;
                                System.err.println(erroredescr);
                                break;
                            }
                            db1.closeDB();
                        } else {
                            errore = true;
                            erroredescr = "3.Errore in query " + sql;
                            System.err.println(erroredescr);
                            break;
                        }
                        db.closeDB();
                    }

                }

            }//for elencotabelle
            System.out.println("NUMERO DI TABELLE AGGIORNATE: " + ctntabupdate);
            if (errore) {
                dbfiliale = new Db(hostfiliale, true);
                if (!erroredescr.startsWith("1.")) { //se almeno mi sono collegato al DB centrale e se sto installando la prima volta
                    eseguiresettabelleFIN(dbfiliale, elencotabelle);
                }
                dbfiliale.closeDB();
                System.err.println(erroredescr);
                System.err.println("Si sono verificati errori durante l'operazione di inizializzazione dei dati sul DB.");
                System.err.println("Il DB è stato resettato");
            }
            System.out.println("-----------------   END   ------------------------------");
        } catch (Exception e) {
            e.printStackTrace();
        }

        System.out.println("-----------------   END   ------------------------------");
        return errore;

    }

    public boolean eseguiresettabelleFIN(Db dbfiliale, ArrayList<String> elencotabelle) {
        boolean esitotruncate = true;
        for (int g = 0; g < elencotabelle.size(); g++) {
            String tablename = elencotabelle.get(g);
            if (tablename.equals("anagrafica_client")
                    || tablename.equals("anagrafica_client_modprof")
                    || tablename.equals("anagrafica_ru_attach")
                    || tablename.equals("codici_fiscali_italia")
                    || tablename.equals("compro")
                    || tablename.equals("comuni_apm")
                    || tablename.equals("comuni_apm")
                    || tablename.equals("comuni_apm")
                    || tablename.equals("ch_transaction_doc")
                    || tablename.equals("ch_transaction_client")) {
                System.out.println("Eseguo TRUNCATE per la tabella " + tablename);
                if (!dbfiliale.eseuitruncate(tablename)) {
                    esitotruncate = false;
                }
            }
        }
        return esitotruncate;
    }

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        String fil = this.branchcod.getText().trim();
        String database = this.type.getSelectedItem().toString();
        Db db1;
        if (database.equalsIgnoreCase("PRODUZIONE")) {
            db1 = new Db(hostPROD, false);
        } else {
            db1 = new Db(hostTEST, false);
        }

        if (db1.getC() != null) {
            ArrayList<String> out = db1.list_cod_branch_enabled();
            if (out.contains(fil)) {
                ArrayList<String[]> ipfil = db1.getIpFiliale();
                String hsfil = Utility.formatAL(fil, ipfil, 1);
                boolean es = datiRIMANENTI(database, hsfil, fil);
                if (es) {//ERRORE
                    JOptionPane.showMessageDialog(this, "Si è verificato un errore, riprovare la Fase UNO.", "Errore", JOptionPane.ERROR_MESSAGE);
                } else {
                    this.f1ok.setVisible(true);
                    this.f1ko.setVisible(false);
                    JOptionPane.showMessageDialog(this, "datiRIMANENTI completata", "OK", JOptionPane.INFORMATION_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Inserire un codice filiale corretto", "Codice filiale non corretto", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Connessione al DB centrale non disponibile", "Connessione errata", JOptionPane.ERROR_MESSAGE);
        }


    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Run.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Run.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Run.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Run.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Run().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField branchcod;
    private javax.swing.JLabel f1ko;
    private javax.swing.JLabel f1ok;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JComboBox<String> type;
    // End of variables declaration//GEN-END:variables
}
